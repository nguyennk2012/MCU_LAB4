
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d98  08003d98  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003d98  08003d98  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d98  08003d98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d98  08003d98  00013d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000074  08003e14  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08003e14  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dec8  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000227d  00000000  00000000  0002dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8e  00000000  00000000  00030fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183db  00000000  00000000  00031a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010574  00000000  00000000  00049e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d0f7  00000000  00000000  0005a38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cdc  00000000  00000000  000e7484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000eb160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ce4 	.word	0x08003ce4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003ce4 	.word	0x08003ce4

0800014c <command_fsm>:
} process_t;

command_t CMD_state = FREE;
process_t PROC_state = GET_RST;

void command_fsm(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (idx == MAX_BUFFER_LENGTH){
 8000150:	4ba0      	ldr	r3, [pc, #640]	; (80003d4 <command_fsm+0x288>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b14      	cmp	r3, #20
 8000156:	d10c      	bne.n	8000172 <command_fsm+0x26>
		HAL_UART_Transmit(&huart2, cmdError, sizeof(cmdError), 100);
 8000158:	2364      	movs	r3, #100	; 0x64
 800015a:	2212      	movs	r2, #18
 800015c:	499e      	ldr	r1, [pc, #632]	; (80003d8 <command_fsm+0x28c>)
 800015e:	489f      	ldr	r0, [pc, #636]	; (80003dc <command_fsm+0x290>)
 8000160:	f002 ff30 	bl	8002fc4 <HAL_UART_Transmit>
		CMD_state = FREE;
 8000164:	4b9e      	ldr	r3, [pc, #632]	; (80003e0 <command_fsm+0x294>)
 8000166:	2208      	movs	r2, #8
 8000168:	701a      	strb	r2, [r3, #0]
		idx = 0;
 800016a:	4b9a      	ldr	r3, [pc, #616]	; (80003d4 <command_fsm+0x288>)
 800016c:	2200      	movs	r2, #0
 800016e:	701a      	strb	r2, [r3, #0]
		return;
 8000170:	e336      	b.n	80007e0 <command_fsm+0x694>
	}
	switch (CMD_state)
 8000172:	4b9b      	ldr	r3, [pc, #620]	; (80003e0 <command_fsm+0x294>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	2b08      	cmp	r3, #8
 8000178:	f200 8332 	bhi.w	80007e0 <command_fsm+0x694>
 800017c:	a201      	add	r2, pc, #4	; (adr r2, 8000184 <command_fsm+0x38>)
 800017e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000182:	bf00      	nop
 8000184:	08000217 	.word	0x08000217
 8000188:	080002c5 	.word	0x080002c5
 800018c:	0800034d 	.word	0x0800034d
 8000190:	080003f1 	.word	0x080003f1
 8000194:	08000479 	.word	0x08000479
 8000198:	08000501 	.word	0x08000501
 800019c:	08000589 	.word	0x08000589
 80001a0:	0800061f 	.word	0x0800061f
 80001a4:	080001a9 	.word	0x080001a9
	{
	case FREE:
		switch(temp)
 80001a8:	4b8e      	ldr	r3, [pc, #568]	; (80003e4 <command_fsm+0x298>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b21      	cmp	r3, #33	; 0x21
 80001ae:	d006      	beq.n	80001be <command_fsm+0x72>
 80001b0:	2b21      	cmp	r3, #33	; 0x21
 80001b2:	dc19      	bgt.n	80001e8 <command_fsm+0x9c>
 80001b4:	2b08      	cmp	r3, #8
 80001b6:	d02c      	beq.n	8000212 <command_fsm+0xc6>
 80001b8:	2b0d      	cmp	r3, #13
 80001ba:	d02a      	beq.n	8000212 <command_fsm+0xc6>
 80001bc:	e014      	b.n	80001e8 <command_fsm+0x9c>
		{
		case '!':
			CMD_state = START;
 80001be:	4b88      	ldr	r3, [pc, #544]	; (80003e0 <command_fsm+0x294>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 80001c4:	4b83      	ldr	r3, [pc, #524]	; (80003d4 <command_fsm+0x288>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	1c5a      	adds	r2, r3, #1
 80001ca:	b2d1      	uxtb	r1, r2
 80001cc:	4a81      	ldr	r2, [pc, #516]	; (80003d4 <command_fsm+0x288>)
 80001ce:	7011      	strb	r1, [r2, #0]
 80001d0:	461a      	mov	r2, r3
 80001d2:	4b84      	ldr	r3, [pc, #528]	; (80003e4 <command_fsm+0x298>)
 80001d4:	7819      	ldrb	r1, [r3, #0]
 80001d6:	4b84      	ldr	r3, [pc, #528]	; (80003e8 <command_fsm+0x29c>)
 80001d8:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&huart2, &temp, sizeof(temp), 100);
 80001da:	2364      	movs	r3, #100	; 0x64
 80001dc:	2201      	movs	r2, #1
 80001de:	4981      	ldr	r1, [pc, #516]	; (80003e4 <command_fsm+0x298>)
 80001e0:	487e      	ldr	r0, [pc, #504]	; (80003dc <command_fsm+0x290>)
 80001e2:	f002 feef 	bl	8002fc4 <HAL_UART_Transmit>
			break;
 80001e6:	e015      	b.n	8000214 <command_fsm+0xc8>
		case '\r':
		case 8:
			break;
		default:
			CMD_state = INVALID;
 80001e8:	4b7d      	ldr	r3, [pc, #500]	; (80003e0 <command_fsm+0x294>)
 80001ea:	2207      	movs	r2, #7
 80001ec:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 80001ee:	4b79      	ldr	r3, [pc, #484]	; (80003d4 <command_fsm+0x288>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	1c5a      	adds	r2, r3, #1
 80001f4:	b2d1      	uxtb	r1, r2
 80001f6:	4a77      	ldr	r2, [pc, #476]	; (80003d4 <command_fsm+0x288>)
 80001f8:	7011      	strb	r1, [r2, #0]
 80001fa:	461a      	mov	r2, r3
 80001fc:	4b79      	ldr	r3, [pc, #484]	; (80003e4 <command_fsm+0x298>)
 80001fe:	7819      	ldrb	r1, [r3, #0]
 8000200:	4b79      	ldr	r3, [pc, #484]	; (80003e8 <command_fsm+0x29c>)
 8000202:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&huart2, &temp, sizeof(temp), 100);
 8000204:	2364      	movs	r3, #100	; 0x64
 8000206:	2201      	movs	r2, #1
 8000208:	4976      	ldr	r1, [pc, #472]	; (80003e4 <command_fsm+0x298>)
 800020a:	4874      	ldr	r0, [pc, #464]	; (80003dc <command_fsm+0x290>)
 800020c:	f002 feda 	bl	8002fc4 <HAL_UART_Transmit>
			break;
 8000210:	e000      	b.n	8000214 <command_fsm+0xc8>
			break;
 8000212:	bf00      	nop
		}
		break;
 8000214:	e2e4      	b.n	80007e0 <command_fsm+0x694>
	case START:
		HAL_UART_Transmit(&huart2, &temp, sizeof(temp), 100);
 8000216:	2364      	movs	r3, #100	; 0x64
 8000218:	2201      	movs	r2, #1
 800021a:	4972      	ldr	r1, [pc, #456]	; (80003e4 <command_fsm+0x298>)
 800021c:	486f      	ldr	r0, [pc, #444]	; (80003dc <command_fsm+0x290>)
 800021e:	f002 fed1 	bl	8002fc4 <HAL_UART_Transmit>
		switch(temp)
 8000222:	4b70      	ldr	r3, [pc, #448]	; (80003e4 <command_fsm+0x298>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b52      	cmp	r3, #82	; 0x52
 8000228:	d00a      	beq.n	8000240 <command_fsm+0xf4>
 800022a:	2b52      	cmp	r3, #82	; 0x52
 800022c:	dc3a      	bgt.n	80002a4 <command_fsm+0x158>
 800022e:	2b4f      	cmp	r3, #79	; 0x4f
 8000230:	d015      	beq.n	800025e <command_fsm+0x112>
 8000232:	2b4f      	cmp	r3, #79	; 0x4f
 8000234:	dc36      	bgt.n	80002a4 <command_fsm+0x158>
 8000236:	2b08      	cmp	r3, #8
 8000238:	d020      	beq.n	800027c <command_fsm+0x130>
 800023a:	2b0d      	cmp	r3, #13
 800023c:	d028      	beq.n	8000290 <command_fsm+0x144>
 800023e:	e031      	b.n	80002a4 <command_fsm+0x158>
		{
		case 'R':
			CMD_state = R;
 8000240:	4b67      	ldr	r3, [pc, #412]	; (80003e0 <command_fsm+0x294>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 8000246:	4b63      	ldr	r3, [pc, #396]	; (80003d4 <command_fsm+0x288>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	1c5a      	adds	r2, r3, #1
 800024c:	b2d1      	uxtb	r1, r2
 800024e:	4a61      	ldr	r2, [pc, #388]	; (80003d4 <command_fsm+0x288>)
 8000250:	7011      	strb	r1, [r2, #0]
 8000252:	461a      	mov	r2, r3
 8000254:	4b63      	ldr	r3, [pc, #396]	; (80003e4 <command_fsm+0x298>)
 8000256:	7819      	ldrb	r1, [r3, #0]
 8000258:	4b63      	ldr	r3, [pc, #396]	; (80003e8 <command_fsm+0x29c>)
 800025a:	5499      	strb	r1, [r3, r2]
			break;
 800025c:	e031      	b.n	80002c2 <command_fsm+0x176>
		case 'O':
			CMD_state = O;
 800025e:	4b60      	ldr	r3, [pc, #384]	; (80003e0 <command_fsm+0x294>)
 8000260:	2204      	movs	r2, #4
 8000262:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 8000264:	4b5b      	ldr	r3, [pc, #364]	; (80003d4 <command_fsm+0x288>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	1c5a      	adds	r2, r3, #1
 800026a:	b2d1      	uxtb	r1, r2
 800026c:	4a59      	ldr	r2, [pc, #356]	; (80003d4 <command_fsm+0x288>)
 800026e:	7011      	strb	r1, [r2, #0]
 8000270:	461a      	mov	r2, r3
 8000272:	4b5c      	ldr	r3, [pc, #368]	; (80003e4 <command_fsm+0x298>)
 8000274:	7819      	ldrb	r1, [r3, #0]
 8000276:	4b5c      	ldr	r3, [pc, #368]	; (80003e8 <command_fsm+0x29c>)
 8000278:	5499      	strb	r1, [r3, r2]
			break;
 800027a:	e022      	b.n	80002c2 <command_fsm+0x176>
		case 8:
			CMD_state = FREE;
 800027c:	4b58      	ldr	r3, [pc, #352]	; (80003e0 <command_fsm+0x294>)
 800027e:	2208      	movs	r2, #8
 8000280:	701a      	strb	r2, [r3, #0]
			idx--;
 8000282:	4b54      	ldr	r3, [pc, #336]	; (80003d4 <command_fsm+0x288>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	3b01      	subs	r3, #1
 8000288:	b2da      	uxtb	r2, r3
 800028a:	4b52      	ldr	r3, [pc, #328]	; (80003d4 <command_fsm+0x288>)
 800028c:	701a      	strb	r2, [r3, #0]
			break;
 800028e:	e018      	b.n	80002c2 <command_fsm+0x176>
		case '\r':
			CMD_state = FREE;
 8000290:	4b53      	ldr	r3, [pc, #332]	; (80003e0 <command_fsm+0x294>)
 8000292:	2208      	movs	r2, #8
 8000294:	701a      	strb	r2, [r3, #0]
			idx = 0;
 8000296:	4b4f      	ldr	r3, [pc, #316]	; (80003d4 <command_fsm+0x288>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
			PROC_state = ERROR_CMD;
 800029c:	4b53      	ldr	r3, [pc, #332]	; (80003ec <command_fsm+0x2a0>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
			break;
 80002a2:	e00e      	b.n	80002c2 <command_fsm+0x176>
		default:
			CMD_state = INVALID;
 80002a4:	4b4e      	ldr	r3, [pc, #312]	; (80003e0 <command_fsm+0x294>)
 80002a6:	2207      	movs	r2, #7
 80002a8:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 80002aa:	4b4a      	ldr	r3, [pc, #296]	; (80003d4 <command_fsm+0x288>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	b2d1      	uxtb	r1, r2
 80002b2:	4a48      	ldr	r2, [pc, #288]	; (80003d4 <command_fsm+0x288>)
 80002b4:	7011      	strb	r1, [r2, #0]
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b4a      	ldr	r3, [pc, #296]	; (80003e4 <command_fsm+0x298>)
 80002ba:	7819      	ldrb	r1, [r3, #0]
 80002bc:	4b4a      	ldr	r3, [pc, #296]	; (80003e8 <command_fsm+0x29c>)
 80002be:	5499      	strb	r1, [r3, r2]
			break;
 80002c0:	bf00      	nop
		}
		break;
 80002c2:	e28d      	b.n	80007e0 <command_fsm+0x694>
	case R:
		HAL_UART_Transmit(&huart2, &temp, sizeof(temp), 100);
 80002c4:	2364      	movs	r3, #100	; 0x64
 80002c6:	2201      	movs	r2, #1
 80002c8:	4946      	ldr	r1, [pc, #280]	; (80003e4 <command_fsm+0x298>)
 80002ca:	4844      	ldr	r0, [pc, #272]	; (80003dc <command_fsm+0x290>)
 80002cc:	f002 fe7a 	bl	8002fc4 <HAL_UART_Transmit>
		switch(temp)
 80002d0:	4b44      	ldr	r3, [pc, #272]	; (80003e4 <command_fsm+0x298>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b53      	cmp	r3, #83	; 0x53
 80002d6:	d006      	beq.n	80002e6 <command_fsm+0x19a>
 80002d8:	2b53      	cmp	r3, #83	; 0x53
 80002da:	dc27      	bgt.n	800032c <command_fsm+0x1e0>
 80002dc:	2b08      	cmp	r3, #8
 80002de:	d011      	beq.n	8000304 <command_fsm+0x1b8>
 80002e0:	2b0d      	cmp	r3, #13
 80002e2:	d019      	beq.n	8000318 <command_fsm+0x1cc>
 80002e4:	e022      	b.n	800032c <command_fsm+0x1e0>
		{
		case 'S':
			CMD_state = S;
 80002e6:	4b3e      	ldr	r3, [pc, #248]	; (80003e0 <command_fsm+0x294>)
 80002e8:	2202      	movs	r2, #2
 80002ea:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <command_fsm+0x288>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	1c5a      	adds	r2, r3, #1
 80002f2:	b2d1      	uxtb	r1, r2
 80002f4:	4a37      	ldr	r2, [pc, #220]	; (80003d4 <command_fsm+0x288>)
 80002f6:	7011      	strb	r1, [r2, #0]
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b3a      	ldr	r3, [pc, #232]	; (80003e4 <command_fsm+0x298>)
 80002fc:	7819      	ldrb	r1, [r3, #0]
 80002fe:	4b3a      	ldr	r3, [pc, #232]	; (80003e8 <command_fsm+0x29c>)
 8000300:	5499      	strb	r1, [r3, r2]
			break;
 8000302:	e022      	b.n	800034a <command_fsm+0x1fe>
		case 8:
			CMD_state = START;
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <command_fsm+0x294>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
			idx--;
 800030a:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <command_fsm+0x288>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	3b01      	subs	r3, #1
 8000310:	b2da      	uxtb	r2, r3
 8000312:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <command_fsm+0x288>)
 8000314:	701a      	strb	r2, [r3, #0]
			break;
 8000316:	e018      	b.n	800034a <command_fsm+0x1fe>
		case '\r':
			CMD_state = FREE;
 8000318:	4b31      	ldr	r3, [pc, #196]	; (80003e0 <command_fsm+0x294>)
 800031a:	2208      	movs	r2, #8
 800031c:	701a      	strb	r2, [r3, #0]
			idx = 0;
 800031e:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <command_fsm+0x288>)
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
			PROC_state = ERROR_CMD;
 8000324:	4b31      	ldr	r3, [pc, #196]	; (80003ec <command_fsm+0x2a0>)
 8000326:	2201      	movs	r2, #1
 8000328:	701a      	strb	r2, [r3, #0]
			break;
 800032a:	e00e      	b.n	800034a <command_fsm+0x1fe>
		default:
			CMD_state = INVALID;
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <command_fsm+0x294>)
 800032e:	2207      	movs	r2, #7
 8000330:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <command_fsm+0x288>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	b2d1      	uxtb	r1, r2
 800033a:	4a26      	ldr	r2, [pc, #152]	; (80003d4 <command_fsm+0x288>)
 800033c:	7011      	strb	r1, [r2, #0]
 800033e:	461a      	mov	r2, r3
 8000340:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <command_fsm+0x298>)
 8000342:	7819      	ldrb	r1, [r3, #0]
 8000344:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <command_fsm+0x29c>)
 8000346:	5499      	strb	r1, [r3, r2]
			break;
 8000348:	bf00      	nop
		}
		break;
 800034a:	e249      	b.n	80007e0 <command_fsm+0x694>
	case S:
		HAL_UART_Transmit(&huart2, &temp, sizeof(temp), 100);
 800034c:	2364      	movs	r3, #100	; 0x64
 800034e:	2201      	movs	r2, #1
 8000350:	4924      	ldr	r1, [pc, #144]	; (80003e4 <command_fsm+0x298>)
 8000352:	4822      	ldr	r0, [pc, #136]	; (80003dc <command_fsm+0x290>)
 8000354:	f002 fe36 	bl	8002fc4 <HAL_UART_Transmit>
		switch(temp)
 8000358:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <command_fsm+0x298>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b54      	cmp	r3, #84	; 0x54
 800035e:	d006      	beq.n	800036e <command_fsm+0x222>
 8000360:	2b54      	cmp	r3, #84	; 0x54
 8000362:	dc27      	bgt.n	80003b4 <command_fsm+0x268>
 8000364:	2b08      	cmp	r3, #8
 8000366:	d011      	beq.n	800038c <command_fsm+0x240>
 8000368:	2b0d      	cmp	r3, #13
 800036a:	d019      	beq.n	80003a0 <command_fsm+0x254>
 800036c:	e022      	b.n	80003b4 <command_fsm+0x268>
		{
		case 'T':
			CMD_state = T;
 800036e:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <command_fsm+0x294>)
 8000370:	2203      	movs	r2, #3
 8000372:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <command_fsm+0x288>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	1c5a      	adds	r2, r3, #1
 800037a:	b2d1      	uxtb	r1, r2
 800037c:	4a15      	ldr	r2, [pc, #84]	; (80003d4 <command_fsm+0x288>)
 800037e:	7011      	strb	r1, [r2, #0]
 8000380:	461a      	mov	r2, r3
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <command_fsm+0x298>)
 8000384:	7819      	ldrb	r1, [r3, #0]
 8000386:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <command_fsm+0x29c>)
 8000388:	5499      	strb	r1, [r3, r2]
			break;
 800038a:	e022      	b.n	80003d2 <command_fsm+0x286>
		case 8:
			CMD_state = R;
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <command_fsm+0x294>)
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]
			idx--;
 8000392:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <command_fsm+0x288>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	3b01      	subs	r3, #1
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <command_fsm+0x288>)
 800039c:	701a      	strb	r2, [r3, #0]
			break;
 800039e:	e018      	b.n	80003d2 <command_fsm+0x286>
		case '\r':
			CMD_state = FREE;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <command_fsm+0x294>)
 80003a2:	2208      	movs	r2, #8
 80003a4:	701a      	strb	r2, [r3, #0]
			idx = 0;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <command_fsm+0x288>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
			PROC_state = ERROR_CMD;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <command_fsm+0x2a0>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	701a      	strb	r2, [r3, #0]
			break;
 80003b2:	e00e      	b.n	80003d2 <command_fsm+0x286>
		default:
			CMD_state = INVALID;
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <command_fsm+0x294>)
 80003b6:	2207      	movs	r2, #7
 80003b8:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <command_fsm+0x288>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	1c5a      	adds	r2, r3, #1
 80003c0:	b2d1      	uxtb	r1, r2
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <command_fsm+0x288>)
 80003c4:	7011      	strb	r1, [r2, #0]
 80003c6:	461a      	mov	r2, r3
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <command_fsm+0x298>)
 80003ca:	7819      	ldrb	r1, [r3, #0]
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <command_fsm+0x29c>)
 80003ce:	5499      	strb	r1, [r3, r2]
			break;
 80003d0:	bf00      	nop
		}
		break;
 80003d2:	e205      	b.n	80007e0 <command_fsm+0x694>
 80003d4:	20000091 	.word	0x20000091
 80003d8:	20000000 	.word	0x20000000
 80003dc:	20000128 	.word	0x20000128
 80003e0:	20000012 	.word	0x20000012
 80003e4:	20000090 	.word	0x20000090
 80003e8:	20000094 	.word	0x20000094
 80003ec:	200000ac 	.word	0x200000ac
	case T:
		HAL_UART_Transmit(&huart2, &temp, sizeof(temp), 100);
 80003f0:	2364      	movs	r3, #100	; 0x64
 80003f2:	2201      	movs	r2, #1
 80003f4:	4995      	ldr	r1, [pc, #596]	; (800064c <command_fsm+0x500>)
 80003f6:	4896      	ldr	r0, [pc, #600]	; (8000650 <command_fsm+0x504>)
 80003f8:	f002 fde4 	bl	8002fc4 <HAL_UART_Transmit>
		switch(temp)
 80003fc:	4b93      	ldr	r3, [pc, #588]	; (800064c <command_fsm+0x500>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b23      	cmp	r3, #35	; 0x23
 8000402:	d006      	beq.n	8000412 <command_fsm+0x2c6>
 8000404:	2b23      	cmp	r3, #35	; 0x23
 8000406:	dc27      	bgt.n	8000458 <command_fsm+0x30c>
 8000408:	2b08      	cmp	r3, #8
 800040a:	d011      	beq.n	8000430 <command_fsm+0x2e4>
 800040c:	2b0d      	cmp	r3, #13
 800040e:	d019      	beq.n	8000444 <command_fsm+0x2f8>
 8000410:	e022      	b.n	8000458 <command_fsm+0x30c>
		{
		case '#':
			CMD_state = END;
 8000412:	4b90      	ldr	r3, [pc, #576]	; (8000654 <command_fsm+0x508>)
 8000414:	2206      	movs	r2, #6
 8000416:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 8000418:	4b8f      	ldr	r3, [pc, #572]	; (8000658 <command_fsm+0x50c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	1c5a      	adds	r2, r3, #1
 800041e:	b2d1      	uxtb	r1, r2
 8000420:	4a8d      	ldr	r2, [pc, #564]	; (8000658 <command_fsm+0x50c>)
 8000422:	7011      	strb	r1, [r2, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	4b89      	ldr	r3, [pc, #548]	; (800064c <command_fsm+0x500>)
 8000428:	7819      	ldrb	r1, [r3, #0]
 800042a:	4b8c      	ldr	r3, [pc, #560]	; (800065c <command_fsm+0x510>)
 800042c:	5499      	strb	r1, [r3, r2]
			break;
 800042e:	e022      	b.n	8000476 <command_fsm+0x32a>
		case 8:
			CMD_state = S;
 8000430:	4b88      	ldr	r3, [pc, #544]	; (8000654 <command_fsm+0x508>)
 8000432:	2202      	movs	r2, #2
 8000434:	701a      	strb	r2, [r3, #0]
			idx--;
 8000436:	4b88      	ldr	r3, [pc, #544]	; (8000658 <command_fsm+0x50c>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	3b01      	subs	r3, #1
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4b86      	ldr	r3, [pc, #536]	; (8000658 <command_fsm+0x50c>)
 8000440:	701a      	strb	r2, [r3, #0]
			break;
 8000442:	e018      	b.n	8000476 <command_fsm+0x32a>
		case '\r':
			CMD_state = FREE;
 8000444:	4b83      	ldr	r3, [pc, #524]	; (8000654 <command_fsm+0x508>)
 8000446:	2208      	movs	r2, #8
 8000448:	701a      	strb	r2, [r3, #0]
			idx = 0;
 800044a:	4b83      	ldr	r3, [pc, #524]	; (8000658 <command_fsm+0x50c>)
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
			PROC_state = ERROR_CMD;
 8000450:	4b83      	ldr	r3, [pc, #524]	; (8000660 <command_fsm+0x514>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
			break;
 8000456:	e00e      	b.n	8000476 <command_fsm+0x32a>
		default:
			CMD_state = INVALID;
 8000458:	4b7e      	ldr	r3, [pc, #504]	; (8000654 <command_fsm+0x508>)
 800045a:	2207      	movs	r2, #7
 800045c:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 800045e:	4b7e      	ldr	r3, [pc, #504]	; (8000658 <command_fsm+0x50c>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	b2d1      	uxtb	r1, r2
 8000466:	4a7c      	ldr	r2, [pc, #496]	; (8000658 <command_fsm+0x50c>)
 8000468:	7011      	strb	r1, [r2, #0]
 800046a:	461a      	mov	r2, r3
 800046c:	4b77      	ldr	r3, [pc, #476]	; (800064c <command_fsm+0x500>)
 800046e:	7819      	ldrb	r1, [r3, #0]
 8000470:	4b7a      	ldr	r3, [pc, #488]	; (800065c <command_fsm+0x510>)
 8000472:	5499      	strb	r1, [r3, r2]
			break;
 8000474:	bf00      	nop
		}
		break;
 8000476:	e1b3      	b.n	80007e0 <command_fsm+0x694>
	case O:
		HAL_UART_Transmit(&huart2, &temp, sizeof(temp), 100);
 8000478:	2364      	movs	r3, #100	; 0x64
 800047a:	2201      	movs	r2, #1
 800047c:	4973      	ldr	r1, [pc, #460]	; (800064c <command_fsm+0x500>)
 800047e:	4874      	ldr	r0, [pc, #464]	; (8000650 <command_fsm+0x504>)
 8000480:	f002 fda0 	bl	8002fc4 <HAL_UART_Transmit>
		switch(temp)
 8000484:	4b71      	ldr	r3, [pc, #452]	; (800064c <command_fsm+0x500>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b4b      	cmp	r3, #75	; 0x4b
 800048a:	d006      	beq.n	800049a <command_fsm+0x34e>
 800048c:	2b4b      	cmp	r3, #75	; 0x4b
 800048e:	dc27      	bgt.n	80004e0 <command_fsm+0x394>
 8000490:	2b08      	cmp	r3, #8
 8000492:	d011      	beq.n	80004b8 <command_fsm+0x36c>
 8000494:	2b0d      	cmp	r3, #13
 8000496:	d019      	beq.n	80004cc <command_fsm+0x380>
 8000498:	e022      	b.n	80004e0 <command_fsm+0x394>
		{
		case 'K':
			CMD_state = K;
 800049a:	4b6e      	ldr	r3, [pc, #440]	; (8000654 <command_fsm+0x508>)
 800049c:	2205      	movs	r2, #5
 800049e:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 80004a0:	4b6d      	ldr	r3, [pc, #436]	; (8000658 <command_fsm+0x50c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	1c5a      	adds	r2, r3, #1
 80004a6:	b2d1      	uxtb	r1, r2
 80004a8:	4a6b      	ldr	r2, [pc, #428]	; (8000658 <command_fsm+0x50c>)
 80004aa:	7011      	strb	r1, [r2, #0]
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b67      	ldr	r3, [pc, #412]	; (800064c <command_fsm+0x500>)
 80004b0:	7819      	ldrb	r1, [r3, #0]
 80004b2:	4b6a      	ldr	r3, [pc, #424]	; (800065c <command_fsm+0x510>)
 80004b4:	5499      	strb	r1, [r3, r2]
			break;
 80004b6:	e022      	b.n	80004fe <command_fsm+0x3b2>
		case 8:
			CMD_state = START;
 80004b8:	4b66      	ldr	r3, [pc, #408]	; (8000654 <command_fsm+0x508>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
			idx--;
 80004be:	4b66      	ldr	r3, [pc, #408]	; (8000658 <command_fsm+0x50c>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b64      	ldr	r3, [pc, #400]	; (8000658 <command_fsm+0x50c>)
 80004c8:	701a      	strb	r2, [r3, #0]
			break;
 80004ca:	e018      	b.n	80004fe <command_fsm+0x3b2>
		case '\r':
			CMD_state = FREE;
 80004cc:	4b61      	ldr	r3, [pc, #388]	; (8000654 <command_fsm+0x508>)
 80004ce:	2208      	movs	r2, #8
 80004d0:	701a      	strb	r2, [r3, #0]
			idx = 0;
 80004d2:	4b61      	ldr	r3, [pc, #388]	; (8000658 <command_fsm+0x50c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
			PROC_state = ERROR_CMD;
 80004d8:	4b61      	ldr	r3, [pc, #388]	; (8000660 <command_fsm+0x514>)
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
			break;
 80004de:	e00e      	b.n	80004fe <command_fsm+0x3b2>
		default:
			CMD_state = INVALID;
 80004e0:	4b5c      	ldr	r3, [pc, #368]	; (8000654 <command_fsm+0x508>)
 80004e2:	2207      	movs	r2, #7
 80004e4:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 80004e6:	4b5c      	ldr	r3, [pc, #368]	; (8000658 <command_fsm+0x50c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	1c5a      	adds	r2, r3, #1
 80004ec:	b2d1      	uxtb	r1, r2
 80004ee:	4a5a      	ldr	r2, [pc, #360]	; (8000658 <command_fsm+0x50c>)
 80004f0:	7011      	strb	r1, [r2, #0]
 80004f2:	461a      	mov	r2, r3
 80004f4:	4b55      	ldr	r3, [pc, #340]	; (800064c <command_fsm+0x500>)
 80004f6:	7819      	ldrb	r1, [r3, #0]
 80004f8:	4b58      	ldr	r3, [pc, #352]	; (800065c <command_fsm+0x510>)
 80004fa:	5499      	strb	r1, [r3, r2]
			break;
 80004fc:	bf00      	nop
		}
		break;
 80004fe:	e16f      	b.n	80007e0 <command_fsm+0x694>
	case K:
		HAL_UART_Transmit(&huart2, &temp, sizeof(temp), 100);
 8000500:	2364      	movs	r3, #100	; 0x64
 8000502:	2201      	movs	r2, #1
 8000504:	4951      	ldr	r1, [pc, #324]	; (800064c <command_fsm+0x500>)
 8000506:	4852      	ldr	r0, [pc, #328]	; (8000650 <command_fsm+0x504>)
 8000508:	f002 fd5c 	bl	8002fc4 <HAL_UART_Transmit>
		switch(temp)
 800050c:	4b4f      	ldr	r3, [pc, #316]	; (800064c <command_fsm+0x500>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b23      	cmp	r3, #35	; 0x23
 8000512:	d006      	beq.n	8000522 <command_fsm+0x3d6>
 8000514:	2b23      	cmp	r3, #35	; 0x23
 8000516:	dc27      	bgt.n	8000568 <command_fsm+0x41c>
 8000518:	2b08      	cmp	r3, #8
 800051a:	d011      	beq.n	8000540 <command_fsm+0x3f4>
 800051c:	2b0d      	cmp	r3, #13
 800051e:	d019      	beq.n	8000554 <command_fsm+0x408>
 8000520:	e022      	b.n	8000568 <command_fsm+0x41c>
		{
		case '#':
			CMD_state = END;
 8000522:	4b4c      	ldr	r3, [pc, #304]	; (8000654 <command_fsm+0x508>)
 8000524:	2206      	movs	r2, #6
 8000526:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 8000528:	4b4b      	ldr	r3, [pc, #300]	; (8000658 <command_fsm+0x50c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	1c5a      	adds	r2, r3, #1
 800052e:	b2d1      	uxtb	r1, r2
 8000530:	4a49      	ldr	r2, [pc, #292]	; (8000658 <command_fsm+0x50c>)
 8000532:	7011      	strb	r1, [r2, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b45      	ldr	r3, [pc, #276]	; (800064c <command_fsm+0x500>)
 8000538:	7819      	ldrb	r1, [r3, #0]
 800053a:	4b48      	ldr	r3, [pc, #288]	; (800065c <command_fsm+0x510>)
 800053c:	5499      	strb	r1, [r3, r2]
			break;
 800053e:	e022      	b.n	8000586 <command_fsm+0x43a>
		case 8:
			CMD_state = O;
 8000540:	4b44      	ldr	r3, [pc, #272]	; (8000654 <command_fsm+0x508>)
 8000542:	2204      	movs	r2, #4
 8000544:	701a      	strb	r2, [r3, #0]
			idx--;
 8000546:	4b44      	ldr	r3, [pc, #272]	; (8000658 <command_fsm+0x50c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	3b01      	subs	r3, #1
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b42      	ldr	r3, [pc, #264]	; (8000658 <command_fsm+0x50c>)
 8000550:	701a      	strb	r2, [r3, #0]
			break;
 8000552:	e018      	b.n	8000586 <command_fsm+0x43a>
		case '\r':
			CMD_state = FREE;
 8000554:	4b3f      	ldr	r3, [pc, #252]	; (8000654 <command_fsm+0x508>)
 8000556:	2208      	movs	r2, #8
 8000558:	701a      	strb	r2, [r3, #0]
			idx = 0;
 800055a:	4b3f      	ldr	r3, [pc, #252]	; (8000658 <command_fsm+0x50c>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
			PROC_state = ERROR_CMD;
 8000560:	4b3f      	ldr	r3, [pc, #252]	; (8000660 <command_fsm+0x514>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
			break;
 8000566:	e00e      	b.n	8000586 <command_fsm+0x43a>
		default:
			CMD_state = INVALID;
 8000568:	4b3a      	ldr	r3, [pc, #232]	; (8000654 <command_fsm+0x508>)
 800056a:	2207      	movs	r2, #7
 800056c:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 800056e:	4b3a      	ldr	r3, [pc, #232]	; (8000658 <command_fsm+0x50c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	b2d1      	uxtb	r1, r2
 8000576:	4a38      	ldr	r2, [pc, #224]	; (8000658 <command_fsm+0x50c>)
 8000578:	7011      	strb	r1, [r2, #0]
 800057a:	461a      	mov	r2, r3
 800057c:	4b33      	ldr	r3, [pc, #204]	; (800064c <command_fsm+0x500>)
 800057e:	7819      	ldrb	r1, [r3, #0]
 8000580:	4b36      	ldr	r3, [pc, #216]	; (800065c <command_fsm+0x510>)
 8000582:	5499      	strb	r1, [r3, r2]
			break;
 8000584:	bf00      	nop
		}
		break;
 8000586:	e12b      	b.n	80007e0 <command_fsm+0x694>
	case END:
		HAL_UART_Transmit(&huart2, &temp, sizeof(temp), 100);
 8000588:	2364      	movs	r3, #100	; 0x64
 800058a:	2201      	movs	r2, #1
 800058c:	492f      	ldr	r1, [pc, #188]	; (800064c <command_fsm+0x500>)
 800058e:	4830      	ldr	r0, [pc, #192]	; (8000650 <command_fsm+0x504>)
 8000590:	f002 fd18 	bl	8002fc4 <HAL_UART_Transmit>
		switch(temp)
 8000594:	4b2d      	ldr	r3, [pc, #180]	; (800064c <command_fsm+0x500>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b08      	cmp	r3, #8
 800059a:	d01e      	beq.n	80005da <command_fsm+0x48e>
 800059c:	2b0d      	cmp	r3, #13
 800059e:	d12e      	bne.n	80005fe <command_fsm+0x4b2>
		{
		case '\r':
			CMD_state = FREE;
 80005a0:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <command_fsm+0x508>)
 80005a2:	2208      	movs	r2, #8
 80005a4:	701a      	strb	r2, [r3, #0]
			idx = 0;
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <command_fsm+0x50c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
			if (Data[1] == 'O')
 80005ac:	4b2b      	ldr	r3, [pc, #172]	; (800065c <command_fsm+0x510>)
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	2b4f      	cmp	r3, #79	; 0x4f
 80005b2:	d10e      	bne.n	80005d2 <command_fsm+0x486>
				if (ADC_value != 0){
 80005b4:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <command_fsm+0x518>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d006      	beq.n	80005ca <command_fsm+0x47e>
					PROC_state = GET_RST;
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <command_fsm+0x514>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
					ADC_value = 0;
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <command_fsm+0x518>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
				else {
					PROC_state = ERROR_CMD;
				}
			else
				PROC_state = GET_DATA;
			break;
 80005c8:	e028      	b.n	800061c <command_fsm+0x4d0>
					PROC_state = ERROR_CMD;
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <command_fsm+0x514>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
			break;
 80005d0:	e024      	b.n	800061c <command_fsm+0x4d0>
				PROC_state = GET_DATA;
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <command_fsm+0x514>)
 80005d4:	2202      	movs	r2, #2
 80005d6:	701a      	strb	r2, [r3, #0]
			break;
 80005d8:	e020      	b.n	800061c <command_fsm+0x4d0>
		case 8:
			if (Data[1] == 'O')
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <command_fsm+0x510>)
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	2b4f      	cmp	r3, #79	; 0x4f
 80005e0:	d103      	bne.n	80005ea <command_fsm+0x49e>
				CMD_state = K;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <command_fsm+0x508>)
 80005e4:	2205      	movs	r2, #5
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	e002      	b.n	80005f0 <command_fsm+0x4a4>
			else
				CMD_state = T;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <command_fsm+0x508>)
 80005ec:	2203      	movs	r2, #3
 80005ee:	701a      	strb	r2, [r3, #0]
			idx --;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <command_fsm+0x50c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <command_fsm+0x50c>)
 80005fa:	701a      	strb	r2, [r3, #0]
			break;
 80005fc:	e00e      	b.n	800061c <command_fsm+0x4d0>
		default:
			CMD_state = INVALID;
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <command_fsm+0x508>)
 8000600:	2207      	movs	r2, #7
 8000602:	701a      	strb	r2, [r3, #0]
			Data[idx++] = temp;
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <command_fsm+0x50c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	b2d1      	uxtb	r1, r2
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <command_fsm+0x50c>)
 800060e:	7011      	strb	r1, [r2, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <command_fsm+0x500>)
 8000614:	7819      	ldrb	r1, [r3, #0]
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <command_fsm+0x510>)
 8000618:	5499      	strb	r1, [r3, r2]
			break;
 800061a:	bf00      	nop
		}
		break;
 800061c:	e0e0      	b.n	80007e0 <command_fsm+0x694>
	case INVALID:
		HAL_UART_Transmit(&huart2, &temp, sizeof(temp), 100);
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	2201      	movs	r2, #1
 8000622:	490a      	ldr	r1, [pc, #40]	; (800064c <command_fsm+0x500>)
 8000624:	480a      	ldr	r0, [pc, #40]	; (8000650 <command_fsm+0x504>)
 8000626:	f002 fccd 	bl	8002fc4 <HAL_UART_Transmit>
		switch(temp)
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <command_fsm+0x500>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d01a      	beq.n	8000668 <command_fsm+0x51c>
 8000632:	2b0d      	cmp	r3, #13
 8000634:	f040 80c6 	bne.w	80007c4 <command_fsm+0x678>
		{
		case '\r':
			CMD_state = FREE;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <command_fsm+0x508>)
 800063a:	2208      	movs	r2, #8
 800063c:	701a      	strb	r2, [r3, #0]
			idx = 0;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <command_fsm+0x50c>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
			PROC_state = ERROR_CMD;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <command_fsm+0x514>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
			break;
 800064a:	e0c8      	b.n	80007de <command_fsm+0x692>
 800064c:	20000090 	.word	0x20000090
 8000650:	20000128 	.word	0x20000128
 8000654:	20000012 	.word	0x20000012
 8000658:	20000091 	.word	0x20000091
 800065c:	20000094 	.word	0x20000094
 8000660:	200000ac 	.word	0x200000ac
 8000664:	200000a8 	.word	0x200000a8
		case 8:
			idx--;
 8000668:	4b5e      	ldr	r3, [pc, #376]	; (80007e4 <command_fsm+0x698>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b5c      	ldr	r3, [pc, #368]	; (80007e4 <command_fsm+0x698>)
 8000672:	701a      	strb	r2, [r3, #0]
			if (idx == 5 &&
 8000674:	4b5b      	ldr	r3, [pc, #364]	; (80007e4 <command_fsm+0x698>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b05      	cmp	r3, #5
 800067a:	d117      	bne.n	80006ac <command_fsm+0x560>
					Data[0] == '!' &&
 800067c:	4b5a      	ldr	r3, [pc, #360]	; (80007e8 <command_fsm+0x69c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
			if (idx == 5 &&
 8000680:	2b21      	cmp	r3, #33	; 0x21
 8000682:	d113      	bne.n	80006ac <command_fsm+0x560>
					Data[1] == 'R' &&
 8000684:	4b58      	ldr	r3, [pc, #352]	; (80007e8 <command_fsm+0x69c>)
 8000686:	785b      	ldrb	r3, [r3, #1]
					Data[0] == '!' &&
 8000688:	2b52      	cmp	r3, #82	; 0x52
 800068a:	d10f      	bne.n	80006ac <command_fsm+0x560>
					Data[2] == 'S' &&
 800068c:	4b56      	ldr	r3, [pc, #344]	; (80007e8 <command_fsm+0x69c>)
 800068e:	789b      	ldrb	r3, [r3, #2]
					Data[1] == 'R' &&
 8000690:	2b53      	cmp	r3, #83	; 0x53
 8000692:	d10b      	bne.n	80006ac <command_fsm+0x560>
					Data[3] == 'T' &&
 8000694:	4b54      	ldr	r3, [pc, #336]	; (80007e8 <command_fsm+0x69c>)
 8000696:	78db      	ldrb	r3, [r3, #3]
					Data[2] == 'S' &&
 8000698:	2b54      	cmp	r3, #84	; 0x54
 800069a:	d107      	bne.n	80006ac <command_fsm+0x560>
					Data[4] == '#'){
 800069c:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <command_fsm+0x69c>)
 800069e:	791b      	ldrb	r3, [r3, #4]
					Data[3] == 'T' &&
 80006a0:	2b23      	cmp	r3, #35	; 0x23
 80006a2:	d103      	bne.n	80006ac <command_fsm+0x560>
				CMD_state = END;
 80006a4:	4b51      	ldr	r3, [pc, #324]	; (80007ec <command_fsm+0x6a0>)
 80006a6:	2206      	movs	r2, #6
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e03a      	b.n	8000722 <command_fsm+0x5d6>
			}
			else if (idx == 2 &&
 80006ac:	4b4d      	ldr	r3, [pc, #308]	; (80007e4 <command_fsm+0x698>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d10b      	bne.n	80006cc <command_fsm+0x580>
					Data[0] == '!' &&
 80006b4:	4b4c      	ldr	r3, [pc, #304]	; (80007e8 <command_fsm+0x69c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
			else if (idx == 2 &&
 80006b8:	2b21      	cmp	r3, #33	; 0x21
 80006ba:	d107      	bne.n	80006cc <command_fsm+0x580>
					Data[1] == 'R'){
 80006bc:	4b4a      	ldr	r3, [pc, #296]	; (80007e8 <command_fsm+0x69c>)
 80006be:	785b      	ldrb	r3, [r3, #1]
					Data[0] == '!' &&
 80006c0:	2b52      	cmp	r3, #82	; 0x52
 80006c2:	d103      	bne.n	80006cc <command_fsm+0x580>
				CMD_state = R;
 80006c4:	4b49      	ldr	r3, [pc, #292]	; (80007ec <command_fsm+0x6a0>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e02a      	b.n	8000722 <command_fsm+0x5d6>
			}
			else if (idx == 3 &&
 80006cc:	4b45      	ldr	r3, [pc, #276]	; (80007e4 <command_fsm+0x698>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d10f      	bne.n	80006f4 <command_fsm+0x5a8>
					Data[0] == '!' &&
 80006d4:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <command_fsm+0x69c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
			else if (idx == 3 &&
 80006d8:	2b21      	cmp	r3, #33	; 0x21
 80006da:	d10b      	bne.n	80006f4 <command_fsm+0x5a8>
					Data[1] == 'R' &&
 80006dc:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <command_fsm+0x69c>)
 80006de:	785b      	ldrb	r3, [r3, #1]
					Data[0] == '!' &&
 80006e0:	2b52      	cmp	r3, #82	; 0x52
 80006e2:	d107      	bne.n	80006f4 <command_fsm+0x5a8>
					Data[2] == 'S'){
 80006e4:	4b40      	ldr	r3, [pc, #256]	; (80007e8 <command_fsm+0x69c>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
					Data[1] == 'R' &&
 80006e8:	2b53      	cmp	r3, #83	; 0x53
 80006ea:	d103      	bne.n	80006f4 <command_fsm+0x5a8>
				CMD_state = S;
 80006ec:	4b3f      	ldr	r3, [pc, #252]	; (80007ec <command_fsm+0x6a0>)
 80006ee:	2202      	movs	r2, #2
 80006f0:	701a      	strb	r2, [r3, #0]
 80006f2:	e016      	b.n	8000722 <command_fsm+0x5d6>
			}
			else if (idx == 4 &&
 80006f4:	4b3b      	ldr	r3, [pc, #236]	; (80007e4 <command_fsm+0x698>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d112      	bne.n	8000722 <command_fsm+0x5d6>
					Data[0] == '!' &&
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <command_fsm+0x69c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
			else if (idx == 4 &&
 8000700:	2b21      	cmp	r3, #33	; 0x21
 8000702:	d10e      	bne.n	8000722 <command_fsm+0x5d6>
					Data[1] == 'R' &&
 8000704:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <command_fsm+0x69c>)
 8000706:	785b      	ldrb	r3, [r3, #1]
					Data[0] == '!' &&
 8000708:	2b52      	cmp	r3, #82	; 0x52
 800070a:	d10a      	bne.n	8000722 <command_fsm+0x5d6>
					Data[2] == 'S' &&
 800070c:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <command_fsm+0x69c>)
 800070e:	789b      	ldrb	r3, [r3, #2]
					Data[1] == 'R' &&
 8000710:	2b53      	cmp	r3, #83	; 0x53
 8000712:	d106      	bne.n	8000722 <command_fsm+0x5d6>
					Data[3] == 'T'){
 8000714:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <command_fsm+0x69c>)
 8000716:	78db      	ldrb	r3, [r3, #3]
					Data[2] == 'S' &&
 8000718:	2b54      	cmp	r3, #84	; 0x54
 800071a:	d102      	bne.n	8000722 <command_fsm+0x5d6>
				CMD_state = T;
 800071c:	4b33      	ldr	r3, [pc, #204]	; (80007ec <command_fsm+0x6a0>)
 800071e:	2203      	movs	r2, #3
 8000720:	701a      	strb	r2, [r3, #0]
			}
			if (idx == 4 &&
 8000722:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <command_fsm+0x698>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b04      	cmp	r3, #4
 8000728:	d113      	bne.n	8000752 <command_fsm+0x606>
					Data[0] == '!' &&
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <command_fsm+0x69c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
			if (idx == 4 &&
 800072e:	2b21      	cmp	r3, #33	; 0x21
 8000730:	d10f      	bne.n	8000752 <command_fsm+0x606>
					Data[1] == 'O' &&
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <command_fsm+0x69c>)
 8000734:	785b      	ldrb	r3, [r3, #1]
					Data[0] == '!' &&
 8000736:	2b4f      	cmp	r3, #79	; 0x4f
 8000738:	d10b      	bne.n	8000752 <command_fsm+0x606>
					Data[2] == 'K' &&
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <command_fsm+0x69c>)
 800073c:	789b      	ldrb	r3, [r3, #2]
					Data[1] == 'O' &&
 800073e:	2b4b      	cmp	r3, #75	; 0x4b
 8000740:	d107      	bne.n	8000752 <command_fsm+0x606>
					Data[3] == '#'){
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <command_fsm+0x69c>)
 8000744:	78db      	ldrb	r3, [r3, #3]
					Data[2] == 'K' &&
 8000746:	2b23      	cmp	r3, #35	; 0x23
 8000748:	d103      	bne.n	8000752 <command_fsm+0x606>
				CMD_state = END;
 800074a:	4b28      	ldr	r3, [pc, #160]	; (80007ec <command_fsm+0x6a0>)
 800074c:	2206      	movs	r2, #6
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	e037      	b.n	80007c2 <command_fsm+0x676>
			}
			else if (idx == 3 &&
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <command_fsm+0x698>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d10f      	bne.n	800077a <command_fsm+0x62e>
					Data[0] == '!' &&
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <command_fsm+0x69c>)
 800075c:	781b      	ldrb	r3, [r3, #0]
			else if (idx == 3 &&
 800075e:	2b21      	cmp	r3, #33	; 0x21
 8000760:	d10b      	bne.n	800077a <command_fsm+0x62e>
					Data[1] == 'O' &&
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <command_fsm+0x69c>)
 8000764:	785b      	ldrb	r3, [r3, #1]
					Data[0] == '!' &&
 8000766:	2b4f      	cmp	r3, #79	; 0x4f
 8000768:	d107      	bne.n	800077a <command_fsm+0x62e>
					Data[2] == 'K'){
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <command_fsm+0x69c>)
 800076c:	789b      	ldrb	r3, [r3, #2]
					Data[1] == 'O' &&
 800076e:	2b4b      	cmp	r3, #75	; 0x4b
 8000770:	d103      	bne.n	800077a <command_fsm+0x62e>
				CMD_state = K;
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <command_fsm+0x6a0>)
 8000774:	2205      	movs	r2, #5
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e023      	b.n	80007c2 <command_fsm+0x676>
			}
			else if (idx == 2 &&
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <command_fsm+0x698>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d10b      	bne.n	800079a <command_fsm+0x64e>
					Data[0] == '!' &&
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <command_fsm+0x69c>)
 8000784:	781b      	ldrb	r3, [r3, #0]
			else if (idx == 2 &&
 8000786:	2b21      	cmp	r3, #33	; 0x21
 8000788:	d107      	bne.n	800079a <command_fsm+0x64e>
					Data[1] == 'O'){
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <command_fsm+0x69c>)
 800078c:	785b      	ldrb	r3, [r3, #1]
					Data[0] == '!' &&
 800078e:	2b4f      	cmp	r3, #79	; 0x4f
 8000790:	d103      	bne.n	800079a <command_fsm+0x64e>
				CMD_state = O;
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <command_fsm+0x6a0>)
 8000794:	2204      	movs	r2, #4
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	e013      	b.n	80007c2 <command_fsm+0x676>
			}
			else if (idx == 1 && Data[0] == '!'){
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <command_fsm+0x698>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d107      	bne.n	80007b2 <command_fsm+0x666>
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <command_fsm+0x69c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b21      	cmp	r3, #33	; 0x21
 80007a8:	d103      	bne.n	80007b2 <command_fsm+0x666>
				CMD_state = START;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <command_fsm+0x6a0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e007      	b.n	80007c2 <command_fsm+0x676>
			}
			else if (idx == 0){
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <command_fsm+0x698>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d110      	bne.n	80007dc <command_fsm+0x690>
				CMD_state = FREE;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <command_fsm+0x6a0>)
 80007bc:	2208      	movs	r2, #8
 80007be:	701a      	strb	r2, [r3, #0]
			}
			break;
 80007c0:	e00c      	b.n	80007dc <command_fsm+0x690>
 80007c2:	e00b      	b.n	80007dc <command_fsm+0x690>
		default:
			Data[idx++] = temp;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <command_fsm+0x698>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	b2d1      	uxtb	r1, r2
 80007cc:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <command_fsm+0x698>)
 80007ce:	7011      	strb	r1, [r2, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <command_fsm+0x6a4>)
 80007d4:	7819      	ldrb	r1, [r3, #0]
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <command_fsm+0x69c>)
 80007d8:	5499      	strb	r1, [r3, r2]
			break;
 80007da:	e000      	b.n	80007de <command_fsm+0x692>
			break;
 80007dc:	bf00      	nop
		}
		break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000091 	.word	0x20000091
 80007e8:	20000094 	.word	0x20000094
 80007ec:	20000012 	.word	0x20000012
 80007f0:	20000090 	.word	0x20000090

080007f4 <proc_fsm>:

void proc_fsm(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	switch(PROC_state)
 80007f8:	4b30      	ldr	r3, [pc, #192]	; (80008bc <proc_fsm+0xc8>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d85a      	bhi.n	80008b6 <proc_fsm+0xc2>
 8000800:	a201      	add	r2, pc, #4	; (adr r2, 8000808 <proc_fsm+0x14>)
 8000802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000806:	bf00      	nop
 8000808:	080008b1 	.word	0x080008b1
 800080c:	0800088d 	.word	0x0800088d
 8000810:	08000819 	.word	0x08000819
 8000814:	08000835 	.word	0x08000835
	{
	case GET_DATA:
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8000818:	4829      	ldr	r0, [pc, #164]	; (80008c0 <proc_fsm+0xcc>)
 800081a:	f000 fd9f 	bl	800135c <HAL_ADC_GetValue>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <proc_fsm+0xd0>)
 8000824:	601a      	str	r2, [r3, #0]
		PROC_state = WAIT_CONFORM;
 8000826:	4b25      	ldr	r3, [pc, #148]	; (80008bc <proc_fsm+0xc8>)
 8000828:	2203      	movs	r2, #3
 800082a:	701a      	strb	r2, [r3, #0]
		setTimer0(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fb2f 	bl	8000e90 <setTimer0>
		break;
 8000832:	e040      	b.n	80008b6 <proc_fsm+0xc2>
	case WAIT_CONFORM:
		if (timer0_flag == 1){
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <proc_fsm+0xd4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d13b      	bne.n	80008b4 <proc_fsm+0xc0>
			if (idx != 0)
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <proc_fsm+0xd8>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d005      	beq.n	8000850 <proc_fsm+0x5c>
				HAL_UART_Transmit(&huart2, (uint8_t*)("\r"), 1, 100);
 8000844:	2364      	movs	r3, #100	; 0x64
 8000846:	2201      	movs	r2, #1
 8000848:	4921      	ldr	r1, [pc, #132]	; (80008d0 <proc_fsm+0xdc>)
 800084a:	4822      	ldr	r0, [pc, #136]	; (80008d4 <proc_fsm+0xe0>)
 800084c:	f002 fbba 	bl	8002fc4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, Data, sprintf((char*)Data, "!ADC=%d#\r", ADC_value), 3000);
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <proc_fsm+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4920      	ldr	r1, [pc, #128]	; (80008d8 <proc_fsm+0xe4>)
 8000858:	4820      	ldr	r0, [pc, #128]	; (80008dc <proc_fsm+0xe8>)
 800085a:	f002 fd91 	bl	8003380 <siprintf>
 800085e:	4603      	mov	r3, r0
 8000860:	b29a      	uxth	r2, r3
 8000862:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000866:	491d      	ldr	r1, [pc, #116]	; (80008dc <proc_fsm+0xe8>)
 8000868:	481a      	ldr	r0, [pc, #104]	; (80008d4 <proc_fsm+0xe0>)
 800086a:	f002 fbab 	bl	8002fc4 <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800086e:	2120      	movs	r1, #32
 8000870:	481b      	ldr	r0, [pc, #108]	; (80008e0 <proc_fsm+0xec>)
 8000872:	f001 fa8f 	bl	8001d94 <HAL_GPIO_TogglePin>
			idx = 0;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <proc_fsm+0xd8>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
			CMD_state = FREE;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <proc_fsm+0xf0>)
 800087e:	2208      	movs	r2, #8
 8000880:	701a      	strb	r2, [r3, #0]
			setTimer0(3000);
 8000882:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000886:	f000 fb03 	bl	8000e90 <setTimer0>
		}
		break;
 800088a:	e013      	b.n	80008b4 <proc_fsm+0xc0>
	case GET_RST:
		break;
	case ERROR_CMD:
		if (ADC_value == 0)
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <proc_fsm+0xd0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d103      	bne.n	800089c <proc_fsm+0xa8>
			PROC_state = GET_RST;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <proc_fsm+0xc8>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	e002      	b.n	80008a2 <proc_fsm+0xae>
		else
			PROC_state = WAIT_CONFORM;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <proc_fsm+0xc8>)
 800089e:	2203      	movs	r2, #3
 80008a0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, cmdError, sizeof(cmdError), 100);
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2212      	movs	r2, #18
 80008a6:	4910      	ldr	r1, [pc, #64]	; (80008e8 <proc_fsm+0xf4>)
 80008a8:	480a      	ldr	r0, [pc, #40]	; (80008d4 <proc_fsm+0xe0>)
 80008aa:	f002 fb8b 	bl	8002fc4 <HAL_UART_Transmit>
		break;
 80008ae:	e002      	b.n	80008b6 <proc_fsm+0xc2>
		break;
 80008b0:	bf00      	nop
 80008b2:	e000      	b.n	80008b6 <proc_fsm+0xc2>
		break;
 80008b4:	bf00      	nop
	}
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000ac 	.word	0x200000ac
 80008c0:	200000b0 	.word	0x200000b0
 80008c4:	200000a8 	.word	0x200000a8
 80008c8:	2000017c 	.word	0x2000017c
 80008cc:	20000091 	.word	0x20000091
 80008d0:	08003cfc 	.word	0x08003cfc
 80008d4:	20000128 	.word	0x20000128
 80008d8:	08003d00 	.word	0x08003d00
 80008dc:	20000094 	.word	0x20000094
 80008e0:	40010800 	.word	0x40010800
 80008e4:	20000012 	.word	0x20000012
 80008e8:	20000000 	.word	0x20000000

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 fb28 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f83a 	bl	800096c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f000 f93c 	bl	8000b74 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008fc:	f000 f8c4 	bl	8000a88 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000900:	f000 f884 	bl	8000a0c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000904:	f000 f90c 	bl	8000b20 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <main+0x68>)
 800090a:	f000 fc79 	bl	8001200 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800090e:	4812      	ldr	r0, [pc, #72]	; (8000958 <main+0x6c>)
 8000910:	f001 ff70 	bl	80027f4 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 8000914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000918:	f000 fb76 	bl	8001008 <HAL_Delay>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	490f      	ldr	r1, [pc, #60]	; (800095c <main+0x70>)
 8000920:	480f      	ldr	r0, [pc, #60]	; (8000960 <main+0x74>)
 8000922:	f002 fbd2 	bl	80030ca <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2, (uint8_t*)"Welcome !!! \rPlease enter your command!\r", sizeof("Welcome !!! \rPlease enter your command!\r"), 1000);
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	2229      	movs	r2, #41	; 0x29
 800092c:	490d      	ldr	r1, [pc, #52]	; (8000964 <main+0x78>)
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <main+0x74>)
 8000930:	f002 fb48 	bl	8002fc4 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(10);
 8000934:	200a      	movs	r0, #10
 8000936:	f000 faab 	bl	8000e90 <setTimer0>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (buffer_flag)
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <main+0x7c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d004      	beq.n	800094c <main+0x60>
	  {
		  command_fsm();
 8000942:	f7ff fc03 	bl	800014c <command_fsm>
		  buffer_flag = 0;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <main+0x7c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
	  }
	  proc_fsm();
 800094c:	f7ff ff52 	bl	80007f4 <proc_fsm>
	  if (buffer_flag)
 8000950:	e7f3      	b.n	800093a <main+0x4e>
 8000952:	bf00      	nop
 8000954:	200000b0 	.word	0x200000b0
 8000958:	200000e0 	.word	0x200000e0
 800095c:	20000090 	.word	0x20000090
 8000960:	20000128 	.word	0x20000128
 8000964:	08003d0c 	.word	0x08003d0c
 8000968:	20000170 	.word	0x20000170

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	; 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000976:	2228      	movs	r2, #40	; 0x28
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f002 fd20 	bl	80033c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a4:	2310      	movs	r3, #16
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fa09 	bl	8001dc8 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80009bc:	f000 f916 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fc76 	bl	80022cc <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009e6:	f000 f901 	bl	8000bec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ea:	2302      	movs	r3, #2
 80009ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fdf7 	bl	80025e8 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a00:	f000 f8f4 	bl	8000bec <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3750      	adds	r7, #80	; 0x50
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_ADC1_Init+0x74>)
 8000a1e:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <MX_ADC1_Init+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_ADC1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_ADC1_Init+0x74>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_ADC1_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_ADC1_Init+0x74>)
 8000a36:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_ADC1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_ADC1_Init+0x74>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_ADC1_Init+0x74>)
 8000a4a:	f000 fb01 	bl	8001050 <HAL_ADC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a54:	f000 f8ca 	bl	8000bec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_ADC1_Init+0x74>)
 8000a6a:	f000 fd55 	bl	8001518 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a74:	f000 f8ba 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000b0 	.word	0x200000b0
 8000a84:	40012400 	.word	0x40012400

08000a88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000aae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ab2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000abc:	2209      	movs	r2, #9
 8000abe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ace:	f001 fe41 	bl	8002754 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ad8:	f000 f888 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000aea:	f001 ffd7 	bl	8002a9c <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000af4:	f000 f87a 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000b06:	f002 f9a3 	bl	8002e50 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f000 f86c 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000e0 	.word	0x200000e0

08000b20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_USART2_UART_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_USART2_UART_Init+0x4c>)
 8000b58:	f002 f9e4 	bl	8002f24 <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b62:	f000 f843 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000128 	.word	0x20000128
 8000b70:	40004400 	.word	0x40004400

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_GPIO_Init+0x5c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <MX_GPIO_Init+0x5c>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_GPIO_Init+0x5c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <MX_GPIO_Init+0x60>)
 8000ba6:	f001 f8dd 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000baa:	2320      	movs	r3, #32
 8000bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_GPIO_Init+0x60>)
 8000bc2:	f000 ff53 	bl	8001a6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010800 	.word	0x40010800

08000bd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	timerRun();
 8000be0:	f000 f970 	bl	8000ec4 <timerRun>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_MspInit+0x40>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_MspInit+0x40>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_MspInit+0x40>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_MspInit+0x40>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_MspInit+0x40>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_MspInit+0x40>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <HAL_ADC_MspInit+0x7c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d129      	bne.n	8000cb0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_ADC_MspInit+0x80>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c90:	2303      	movs	r3, #3
 8000c92:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <HAL_ADC_MspInit+0x84>)
 8000c9c:	f000 fee6 	bl	8001a6c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2012      	movs	r0, #18
 8000ca6:	f000 feaa 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000caa:	2012      	movs	r0, #18
 8000cac:	f000 fec3 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40012400 	.word	0x40012400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010800 	.word	0x40010800

08000cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd4:	d113      	bne.n	8000cfe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_TIM_Base_MspInit+0x44>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_TIM_Base_MspInit+0x44>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	61d3      	str	r3, [r2, #28]
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_TIM_Base_MspInit+0x44>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	201c      	movs	r0, #28
 8000cf4:	f000 fe83 	bl	80019fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cf8:	201c      	movs	r0, #28
 8000cfa:	f000 fe9c 	bl	8001a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <HAL_UART_MspInit+0x88>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d12f      	bne.n	8000d8c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d36:	61d3      	str	r3, [r2, #28]
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <HAL_UART_MspInit+0x90>)
 8000d70:	f000 fe7c 	bl	8001a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d74:	2308      	movs	r3, #8
 8000d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_UART_MspInit+0x90>)
 8000d88:	f000 fe70 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40004400 	.word	0x40004400
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010800 	.word	0x40010800

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de6:	f000 f8f3 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <ADC1_2_IRQHandler+0x10>)
 8000df6:	f000 fabd 	bl	8001374 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000b0 	.word	0x200000b0

08000e04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM2_IRQHandler+0x10>)
 8000e0a:	f001 fd3f 	bl	800288c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000e0 	.word	0x200000e0

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f002 fac2 	bl	80033d0 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20002800 	.word	0x20002800
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	20000174 	.word	0x20000174
 8000e80:	200002d0 	.word	0x200002d0

08000e84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <setTimer0>:

int timer0_counter;
int timer0_flag = 0;
int TIMER_CYCLE = 10;

void setTimer0(int duration){
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <setTimer0+0x28>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ea2:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <setTimer0+0x2c>)
 8000ea4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <setTimer0+0x30>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000018 	.word	0x20000018
 8000ebc:	20000178 	.word	0x20000178
 8000ec0:	2000017c 	.word	0x2000017c

08000ec4 <timerRun>:

void timerRun(){
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	if (timer0_counter > 0){
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <timerRun+0x2c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	dd0b      	ble.n	8000ee8 <timerRun+0x24>
		timer0_counter--;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <timerRun+0x2c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <timerRun+0x2c>)
 8000ed8:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0)
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <timerRun+0x2c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <timerRun+0x24>
			timer0_flag = 1;
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <timerRun+0x30>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
	}
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000178 	.word	0x20000178
 8000ef4:	2000017c 	.word	0x2000017c

08000ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef8:	f7ff ffc4 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480b      	ldr	r0, [pc, #44]	; (8000f2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000efe:	490c      	ldr	r1, [pc, #48]	; (8000f30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f00:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f14:	4c09      	ldr	r4, [pc, #36]	; (8000f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f22:	f002 fa5b 	bl	80033dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f26:	f7ff fce1 	bl	80008ec <main>
  bx lr
 8000f2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f34:	08003da0 	.word	0x08003da0
  ldr r2, =_sbss
 8000f38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f3c:	200002cc 	.word	0x200002cc

08000f40 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <CAN1_RX1_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 fd47 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fe4a 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fd5f 	bl	8001a52 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 fd27 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000014 	.word	0x20000014
 8000fc8:	20000020 	.word	0x20000020
 8000fcc:	2000001c 	.word	0x2000001c

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000020 	.word	0x20000020
 8000ff0:	20000180 	.word	0x20000180

08000ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <HAL_GetTick+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000180 	.word	0x20000180

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff fff0 	bl	8000ff4 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffe0 	bl	8000ff4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000020 	.word	0x20000020

08001050 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0be      	b.n	80011f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107c:	2b00      	cmp	r3, #0
 800107e:	d109      	bne.n	8001094 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fdd4 	bl	8000c3c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 fb91 	bl	80017bc <ADC_ConversionStop_Disable>
 800109a:	4603      	mov	r3, r0
 800109c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 8099 	bne.w	80011de <HAL_ADC_Init+0x18e>
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 8095 	bne.w	80011de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010bc:	f023 0302 	bic.w	r3, r3, #2
 80010c0:	f043 0202 	orr.w	r2, r3, #2
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7b1b      	ldrb	r3, [r3, #12]
 80010d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	4313      	orrs	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010e8:	d003      	beq.n	80010f2 <HAL_ADC_Init+0xa2>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d102      	bne.n	80010f8 <HAL_ADC_Init+0xa8>
 80010f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f6:	e000      	b.n	80010fa <HAL_ADC_Init+0xaa>
 80010f8:	2300      	movs	r3, #0
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7d1b      	ldrb	r3, [r3, #20]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d119      	bne.n	800113c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7b1b      	ldrb	r3, [r3, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d109      	bne.n	8001124 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	3b01      	subs	r3, #1
 8001116:	035a      	lsls	r2, r3, #13
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	e00b      	b.n	800113c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	f043 0220 	orr.w	r2, r3, #32
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	f043 0201 	orr.w	r2, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	430a      	orrs	r2, r1
 800114e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <HAL_ADC_Init+0x1a8>)
 8001158:	4013      	ands	r3, r2
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	430b      	orrs	r3, r1
 8001162:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800116c:	d003      	beq.n	8001176 <HAL_ADC_Init+0x126>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d104      	bne.n	8001180 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	3b01      	subs	r3, #1
 800117c:	051b      	lsls	r3, r3, #20
 800117e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	430a      	orrs	r2, r1
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_ADC_Init+0x1ac>)
 800119c:	4013      	ands	r3, r2
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d10b      	bne.n	80011bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	f043 0201 	orr.w	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011ba:	e018      	b.n	80011ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	f023 0312 	bic.w	r3, r3, #18
 80011c4:	f043 0210 	orr.w	r2, r3, #16
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	f043 0201 	orr.w	r2, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011dc:	e007      	b.n	80011ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e2:	f043 0210 	orr.w	r2, r3, #16
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	ffe1f7fd 	.word	0xffe1f7fd
 80011fc:	ff1f0efe 	.word	0xff1f0efe

08001200 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001212:	2b01      	cmp	r3, #1
 8001214:	d101      	bne.n	800121a <HAL_ADC_Start+0x1a>
 8001216:	2302      	movs	r3, #2
 8001218:	e098      	b.n	800134c <HAL_ADC_Start+0x14c>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fa70 	bl	8001708 <ADC_Enable>
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 8087 	bne.w	8001342 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800123c:	f023 0301 	bic.w	r3, r3, #1
 8001240:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a41      	ldr	r2, [pc, #260]	; (8001354 <HAL_ADC_Start+0x154>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d105      	bne.n	800125e <HAL_ADC_Start+0x5e>
 8001252:	4b41      	ldr	r3, [pc, #260]	; (8001358 <HAL_ADC_Start+0x158>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d115      	bne.n	800128a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001274:	2b00      	cmp	r3, #0
 8001276:	d026      	beq.n	80012c6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001280:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001288:	e01d      	b.n	80012c6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <HAL_ADC_Start+0x158>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d004      	beq.n	80012aa <HAL_ADC_Start+0xaa>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a2b      	ldr	r2, [pc, #172]	; (8001354 <HAL_ADC_Start+0x154>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10d      	bne.n	80012c6 <HAL_ADC_Start+0xc6>
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_ADC_Start+0x158>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	f023 0206 	bic.w	r2, r3, #6
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80012de:	e002      	b.n	80012e6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f06f 0202 	mvn.w	r2, #2
 80012f6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001302:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001306:	d113      	bne.n	8001330 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800130c:	4a11      	ldr	r2, [pc, #68]	; (8001354 <HAL_ADC_Start+0x154>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d105      	bne.n	800131e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_ADC_Start+0x158>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800131a:	2b00      	cmp	r3, #0
 800131c:	d108      	bne.n	8001330 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	e00c      	b.n	800134a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	e003      	b.n	800134a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40012800 	.word	0x40012800
 8001358:	40012400 	.word	0x40012400

0800135c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	2b00      	cmp	r3, #0
 8001394:	d03e      	beq.n	8001414 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d039      	beq.n	8001414 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d105      	bne.n	80013b8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013c6:	d11d      	bne.n	8001404 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d119      	bne.n	8001404 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0220 	bic.w	r2, r2, #32
 80013de:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	f043 0201 	orr.w	r2, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f874 	bl	80014f2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f06f 0212 	mvn.w	r2, #18
 8001412:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	2b00      	cmp	r3, #0
 800141c:	d04d      	beq.n	80014ba <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d048      	beq.n	80014ba <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800144a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800144e:	d012      	beq.n	8001476 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800145a:	2b00      	cmp	r3, #0
 800145c:	d125      	bne.n	80014aa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001468:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800146c:	d11d      	bne.n	80014aa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001472:	2b00      	cmp	r3, #0
 8001474:	d119      	bne.n	80014aa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001484:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f9c7 	bl	800183e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f06f 020c 	mvn.w	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d012      	beq.n	80014ea <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00d      	beq.n	80014ea <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f812 	bl	8001504 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f06f 0201 	mvn.w	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
	...

08001518 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x20>
 8001534:	2302      	movs	r3, #2
 8001536:	e0dc      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x1da>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b06      	cmp	r3, #6
 8001546:	d81c      	bhi.n	8001582 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	3b05      	subs	r3, #5
 800155a:	221f      	movs	r2, #31
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	4019      	ands	r1, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	3b05      	subs	r3, #5
 8001574:	fa00 f203 	lsl.w	r2, r0, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	635a      	str	r2, [r3, #52]	; 0x34
 8001580:	e03c      	b.n	80015fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b0c      	cmp	r3, #12
 8001588:	d81c      	bhi.n	80015c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	3b23      	subs	r3, #35	; 0x23
 800159c:	221f      	movs	r2, #31
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	4019      	ands	r1, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	3b23      	subs	r3, #35	; 0x23
 80015b6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
 80015c2:	e01b      	b.n	80015fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	3b41      	subs	r3, #65	; 0x41
 80015d6:	221f      	movs	r2, #31
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	4019      	ands	r1, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	3b41      	subs	r3, #65	; 0x41
 80015f0:	fa00 f203 	lsl.w	r2, r0, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b09      	cmp	r3, #9
 8001602:	d91c      	bls.n	800163e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68d9      	ldr	r1, [r3, #12]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	3b1e      	subs	r3, #30
 8001616:	2207      	movs	r2, #7
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	4019      	ands	r1, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	6898      	ldr	r0, [r3, #8]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	3b1e      	subs	r3, #30
 8001630:	fa00 f203 	lsl.w	r2, r0, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	e019      	b.n	8001672 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6919      	ldr	r1, [r3, #16]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	2207      	movs	r2, #7
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	4019      	ands	r1, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	6898      	ldr	r0, [r3, #8]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	fa00 f203 	lsl.w	r2, r0, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b10      	cmp	r3, #16
 8001678:	d003      	beq.n	8001682 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800167e:	2b11      	cmp	r3, #17
 8001680:	d132      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <HAL_ADC_ConfigChannel+0x1e4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d125      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d126      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d11a      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_ADC_ConfigChannel+0x1e8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <HAL_ADC_ConfigChannel+0x1ec>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	0c9a      	lsrs	r2, r3, #18
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016c8:	e002      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f9      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x1b2>
 80016d6:	e007      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	f043 0220 	orr.w	r2, r3, #32
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	40012400 	.word	0x40012400
 8001700:	20000014 	.word	0x20000014
 8001704:	431bde83 	.word	0x431bde83

08001708 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d040      	beq.n	80017a8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0201 	orr.w	r2, r2, #1
 8001734:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <ADC_Enable+0xac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <ADC_Enable+0xb0>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	0c9b      	lsrs	r3, r3, #18
 8001742:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001744:	e002      	b.n	800174c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3b01      	subs	r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001752:	f7ff fc4f 	bl	8000ff4 <HAL_GetTick>
 8001756:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001758:	e01f      	b.n	800179a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800175a:	f7ff fc4b 	bl	8000ff4 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d918      	bls.n	800179a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d011      	beq.n	800179a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	f043 0210 	orr.w	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	f043 0201 	orr.w	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e007      	b.n	80017aa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d1d8      	bne.n	800175a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000014 	.word	0x20000014
 80017b8:	431bde83 	.word	0x431bde83

080017bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d12e      	bne.n	8001834 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017e6:	f7ff fc05 	bl	8000ff4 <HAL_GetTick>
 80017ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017ec:	e01b      	b.n	8001826 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017ee:	f7ff fc01 	bl	8000ff4 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d914      	bls.n	8001826 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b01      	cmp	r3, #1
 8001808:	d10d      	bne.n	8001826 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	f043 0210 	orr.w	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	f043 0201 	orr.w	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e007      	b.n	8001836 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d0dc      	beq.n	80017ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4906      	ldr	r1, [pc, #24]	; (80018e8 <__NVIC_EnableIRQ+0x34>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff90 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff2d 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff42 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff90 	bl	8001940 <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5f 	bl	80018ec <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff35 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffa2 	bl	80019a4 <SysTick_Config>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b08b      	sub	sp, #44	; 0x2c
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	e161      	b.n	8001d44 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a80:	2201      	movs	r2, #1
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8150 	bne.w	8001d3e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a97      	ldr	r2, [pc, #604]	; (8001d00 <HAL_GPIO_Init+0x294>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d05e      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a95      	ldr	r2, [pc, #596]	; (8001d00 <HAL_GPIO_Init+0x294>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d875      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001aae:	4a95      	ldr	r2, [pc, #596]	; (8001d04 <HAL_GPIO_Init+0x298>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d058      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ab4:	4a93      	ldr	r2, [pc, #588]	; (8001d04 <HAL_GPIO_Init+0x298>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d86f      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001aba:	4a93      	ldr	r2, [pc, #588]	; (8001d08 <HAL_GPIO_Init+0x29c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d052      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ac0:	4a91      	ldr	r2, [pc, #580]	; (8001d08 <HAL_GPIO_Init+0x29c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d869      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ac6:	4a91      	ldr	r2, [pc, #580]	; (8001d0c <HAL_GPIO_Init+0x2a0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d04c      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001acc:	4a8f      	ldr	r2, [pc, #572]	; (8001d0c <HAL_GPIO_Init+0x2a0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d863      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ad2:	4a8f      	ldr	r2, [pc, #572]	; (8001d10 <HAL_GPIO_Init+0x2a4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d046      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ad8:	4a8d      	ldr	r2, [pc, #564]	; (8001d10 <HAL_GPIO_Init+0x2a4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d85d      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ade:	2b12      	cmp	r3, #18
 8001ae0:	d82a      	bhi.n	8001b38 <HAL_GPIO_Init+0xcc>
 8001ae2:	2b12      	cmp	r3, #18
 8001ae4:	d859      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ae6:	a201      	add	r2, pc, #4	; (adr r2, 8001aec <HAL_GPIO_Init+0x80>)
 8001ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aec:	08001b67 	.word	0x08001b67
 8001af0:	08001b41 	.word	0x08001b41
 8001af4:	08001b53 	.word	0x08001b53
 8001af8:	08001b95 	.word	0x08001b95
 8001afc:	08001b9b 	.word	0x08001b9b
 8001b00:	08001b9b 	.word	0x08001b9b
 8001b04:	08001b9b 	.word	0x08001b9b
 8001b08:	08001b9b 	.word	0x08001b9b
 8001b0c:	08001b9b 	.word	0x08001b9b
 8001b10:	08001b9b 	.word	0x08001b9b
 8001b14:	08001b9b 	.word	0x08001b9b
 8001b18:	08001b9b 	.word	0x08001b9b
 8001b1c:	08001b9b 	.word	0x08001b9b
 8001b20:	08001b9b 	.word	0x08001b9b
 8001b24:	08001b9b 	.word	0x08001b9b
 8001b28:	08001b9b 	.word	0x08001b9b
 8001b2c:	08001b9b 	.word	0x08001b9b
 8001b30:	08001b49 	.word	0x08001b49
 8001b34:	08001b5d 	.word	0x08001b5d
 8001b38:	4a76      	ldr	r2, [pc, #472]	; (8001d14 <HAL_GPIO_Init+0x2a8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b3e:	e02c      	b.n	8001b9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e029      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e024      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	3308      	adds	r3, #8
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e01f      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	330c      	adds	r3, #12
 8001b62:	623b      	str	r3, [r7, #32]
          break;
 8001b64:	e01a      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	623b      	str	r3, [r7, #32]
          break;
 8001b72:	e013      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	611a      	str	r2, [r3, #16]
          break;
 8001b86:	e009      	b.n	8001b9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	615a      	str	r2, [r3, #20]
          break;
 8001b92:	e003      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          break;
 8001b9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2bff      	cmp	r3, #255	; 0xff
 8001ba0:	d801      	bhi.n	8001ba6 <HAL_GPIO_Init+0x13a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	e001      	b.n	8001baa <HAL_GPIO_Init+0x13e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2bff      	cmp	r3, #255	; 0xff
 8001bb0:	d802      	bhi.n	8001bb8 <HAL_GPIO_Init+0x14c>
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x152>
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	3b08      	subs	r3, #8
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	210f      	movs	r1, #15
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	401a      	ands	r2, r3
 8001bd0:	6a39      	ldr	r1, [r7, #32]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80a9 	beq.w	8001d3e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bec:	4b4a      	ldr	r3, [pc, #296]	; (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a49      	ldr	r2, [pc, #292]	; (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c04:	4a45      	ldr	r2, [pc, #276]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3d      	ldr	r2, [pc, #244]	; (8001d20 <HAL_GPIO_Init+0x2b4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00d      	beq.n	8001c4c <HAL_GPIO_Init+0x1e0>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3c      	ldr	r2, [pc, #240]	; (8001d24 <HAL_GPIO_Init+0x2b8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_Init+0x1dc>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3b      	ldr	r2, [pc, #236]	; (8001d28 <HAL_GPIO_Init+0x2bc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_GPIO_Init+0x1d8>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e004      	b.n	8001c4e <HAL_GPIO_Init+0x1e2>
 8001c44:	2303      	movs	r3, #3
 8001c46:	e002      	b.n	8001c4e <HAL_GPIO_Init+0x1e2>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_GPIO_Init+0x1e2>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c50:	f002 0203 	and.w	r2, r2, #3
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	4093      	lsls	r3, r2
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c5e:	492f      	ldr	r1, [pc, #188]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c78:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	492b      	ldr	r1, [pc, #172]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c86:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	4927      	ldr	r1, [pc, #156]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4921      	ldr	r1, [pc, #132]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	491d      	ldr	r1, [pc, #116]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4917      	ldr	r1, [pc, #92]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	4913      	ldr	r1, [pc, #76]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01f      	beq.n	8001d30 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	490d      	ldr	r1, [pc, #52]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
 8001cfc:	e01f      	b.n	8001d3e <HAL_GPIO_Init+0x2d2>
 8001cfe:	bf00      	nop
 8001d00:	10320000 	.word	0x10320000
 8001d04:	10310000 	.word	0x10310000
 8001d08:	10220000 	.word	0x10220000
 8001d0c:	10210000 	.word	0x10210000
 8001d10:	10120000 	.word	0x10120000
 8001d14:	10110000 	.word	0x10110000
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	40010800 	.word	0x40010800
 8001d24:	40010c00 	.word	0x40010c00
 8001d28:	40011000 	.word	0x40011000
 8001d2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_GPIO_Init+0x2f4>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	4909      	ldr	r1, [pc, #36]	; (8001d60 <HAL_GPIO_Init+0x2f4>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	3301      	adds	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f47f ae96 	bne.w	8001a80 <HAL_GPIO_Init+0x14>
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	372c      	adds	r7, #44	; 0x2c
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	40010400 	.word	0x40010400

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	611a      	str	r2, [r3, #16]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	041a      	lsls	r2, r3, #16
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43d9      	mvns	r1, r3
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	400b      	ands	r3, r1
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	611a      	str	r2, [r3, #16]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e272      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8087 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de8:	4b92      	ldr	r3, [pc, #584]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d00c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df4:	4b8f      	ldr	r3, [pc, #572]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d112      	bne.n	8001e26 <HAL_RCC_OscConfig+0x5e>
 8001e00:	4b8c      	ldr	r3, [pc, #560]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0c:	d10b      	bne.n	8001e26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0e:	4b89      	ldr	r3, [pc, #548]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d06c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x12c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d168      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e24c      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x76>
 8001e30:	4b80      	ldr	r3, [pc, #512]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a7f      	ldr	r2, [pc, #508]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	e02e      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x98>
 8001e46:	4b7b      	ldr	r3, [pc, #492]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7a      	ldr	r2, [pc, #488]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b78      	ldr	r3, [pc, #480]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a77      	ldr	r2, [pc, #476]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e01d      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0xbc>
 8001e6a:	4b72      	ldr	r3, [pc, #456]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a71      	ldr	r2, [pc, #452]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b6f      	ldr	r3, [pc, #444]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6e      	ldr	r2, [pc, #440]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0xd4>
 8001e84:	4b6b      	ldr	r3, [pc, #428]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6a      	ldr	r2, [pc, #424]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b68      	ldr	r3, [pc, #416]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a67      	ldr	r2, [pc, #412]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d013      	beq.n	8001ecc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f8a6 	bl	8000ff4 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f8a2 	bl	8000ff4 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e200      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0xe4>
 8001eca:	e014      	b.n	8001ef6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f892 	bl	8000ff4 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff f88e 	bl	8000ff4 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1ec      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x10c>
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d063      	beq.n	8001fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f02:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f0e:	4b49      	ldr	r3, [pc, #292]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d11c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x18c>
 8001f1a:	4b46      	ldr	r3, [pc, #280]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d116      	bne.n	8001f54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	4b43      	ldr	r3, [pc, #268]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x176>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e1c0      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4939      	ldr	r1, [pc, #228]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	e03a      	b.n	8001fca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5c:	4b36      	ldr	r3, [pc, #216]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff f847 	bl	8000ff4 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f843 	bl	8000ff4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1a1      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4927      	ldr	r1, [pc, #156]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f826 	bl	8000ff4 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fac:	f7ff f822 	bl	8000ff4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e180      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d03a      	beq.n	800204c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d019      	beq.n	8002012 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_RCC_OscConfig+0x274>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f806 	bl	8000ff4 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fec:	f7ff f802 	bl	8000ff4 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e160      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HAL_RCC_OscConfig+0x26c>)
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800200a:	2001      	movs	r0, #1
 800200c:	f000 face 	bl	80025ac <RCC_Delay>
 8002010:	e01c      	b.n	800204c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_RCC_OscConfig+0x274>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7fe ffec 	bl	8000ff4 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201e:	e00f      	b.n	8002040 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7fe ffe8 	bl	8000ff4 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d908      	bls.n	8002040 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e146      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	42420000 	.word	0x42420000
 800203c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	4b92      	ldr	r3, [pc, #584]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e9      	bne.n	8002020 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a6 	beq.w	80021a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205e:	4b8b      	ldr	r3, [pc, #556]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10d      	bne.n	8002086 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a87      	ldr	r2, [pc, #540]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	61d3      	str	r3, [r2, #28]
 8002076:	4b85      	ldr	r3, [pc, #532]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	2301      	movs	r3, #1
 8002084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b82      	ldr	r3, [pc, #520]	; (8002290 <HAL_RCC_OscConfig+0x4c8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d118      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b7f      	ldr	r3, [pc, #508]	; (8002290 <HAL_RCC_OscConfig+0x4c8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7e      	ldr	r2, [pc, #504]	; (8002290 <HAL_RCC_OscConfig+0x4c8>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209e:	f7fe ffa9 	bl	8000ff4 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a6:	f7fe ffa5 	bl	8000ff4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b64      	cmp	r3, #100	; 0x64
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e103      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	4b75      	ldr	r3, [pc, #468]	; (8002290 <HAL_RCC_OscConfig+0x4c8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x312>
 80020cc:	4b6f      	ldr	r3, [pc, #444]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4a6e      	ldr	r2, [pc, #440]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6213      	str	r3, [r2, #32]
 80020d8:	e02d      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x334>
 80020e2:	4b6a      	ldr	r3, [pc, #424]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a69      	ldr	r2, [pc, #420]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	4b67      	ldr	r3, [pc, #412]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a66      	ldr	r2, [pc, #408]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	e01c      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b05      	cmp	r3, #5
 8002102:	d10c      	bne.n	800211e <HAL_RCC_OscConfig+0x356>
 8002104:	4b61      	ldr	r3, [pc, #388]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a60      	ldr	r2, [pc, #384]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	4b5e      	ldr	r3, [pc, #376]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a5d      	ldr	r2, [pc, #372]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	e00b      	b.n	8002136 <HAL_RCC_OscConfig+0x36e>
 800211e:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a5a      	ldr	r2, [pc, #360]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	4b58      	ldr	r3, [pc, #352]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a57      	ldr	r2, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002130:	f023 0304 	bic.w	r3, r3, #4
 8002134:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d015      	beq.n	800216a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7fe ff59 	bl	8000ff4 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe ff55 	bl	8000ff4 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0b1      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ee      	beq.n	8002146 <HAL_RCC_OscConfig+0x37e>
 8002168:	e014      	b.n	8002194 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7fe ff43 	bl	8000ff4 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe ff3f 	bl	8000ff4 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e09b      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	4b40      	ldr	r3, [pc, #256]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219a:	4b3c      	ldr	r3, [pc, #240]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a3b      	ldr	r2, [pc, #236]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8087 	beq.w	80022be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b0:	4b36      	ldr	r3, [pc, #216]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d061      	beq.n	8002280 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d146      	bne.n	8002252 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c4:	4b33      	ldr	r3, [pc, #204]	; (8002294 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7fe ff13 	bl	8000ff4 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7fe ff0f 	bl	8000ff4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e06d      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d108      	bne.n	800220c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021fa:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	4921      	ldr	r1, [pc, #132]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a19      	ldr	r1, [r3, #32]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	430b      	orrs	r3, r1
 800221e:	491b      	ldr	r1, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_OscConfig+0x4cc>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe fee3 	bl	8000ff4 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe fedf 	bl	8000ff4 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e03d      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x46a>
 8002250:	e035      	b.n	80022be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_RCC_OscConfig+0x4cc>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fecc 	bl	8000ff4 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fec8 	bl	8000ff4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e026      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_OscConfig+0x4c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x498>
 800227e:	e01e      	b.n	80022be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e019      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
 8002294:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_OscConfig+0x500>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000

080022cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0d0      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d910      	bls.n	8002310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
 80022f6:	4965      	ldr	r1, [pc, #404]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0b8      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800234a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b50      	ldr	r3, [pc, #320]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	494d      	ldr	r1, [pc, #308]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d040      	beq.n	80023ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	4b41      	ldr	r3, [pc, #260]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e073      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e06b      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023aa:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f023 0203 	bic.w	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4936      	ldr	r1, [pc, #216]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023bc:	f7fe fe1a 	bl	8000ff4 <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	e00a      	b.n	80023da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c4:	f7fe fe16 	bl	8000ff4 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e053      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 020c 	and.w	r2, r3, #12
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1eb      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d210      	bcs.n	800241c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	4922      	ldr	r1, [pc, #136]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e032      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4916      	ldr	r1, [pc, #88]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490e      	ldr	r1, [pc, #56]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245a:	f000 f821 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	490a      	ldr	r1, [pc, #40]	; (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1cc>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_RCC_ClockConfig+0x1d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fd78 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	40021000 	.word	0x40021000
 8002494:	08003d38 	.word	0x08003d38
 8002498:	20000014 	.word	0x20000014
 800249c:	2000001c 	.word	0x2000001c

080024a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCC_GetSysClockFreq+0x94>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x30>
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x36>
 80024ce:	e027      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 80024d2:	613b      	str	r3, [r7, #16]
      break;
 80024d4:	e027      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	0c9b      	lsrs	r3, r3, #18
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e0:	5cd3      	ldrb	r3, [r2, r3]
 80024e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_RCC_GetSysClockFreq+0x94>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	0c5b      	lsrs	r3, r3, #17
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 8002502:	fb03 f202 	mul.w	r2, r3, r2
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e004      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	613b      	str	r3, [r7, #16]
      break;
 800251e:	e002      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 8002522:	613b      	str	r3, [r7, #16]
      break;
 8002524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002526:	693b      	ldr	r3, [r7, #16]
}
 8002528:	4618      	mov	r0, r3
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	007a1200 	.word	0x007a1200
 800253c:	08003d50 	.word	0x08003d50
 8002540:	08003d60 	.word	0x08003d60
 8002544:	003d0900 	.word	0x003d0900

08002548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800254c:	4b02      	ldr	r3, [pc, #8]	; (8002558 <HAL_RCC_GetHCLKFreq+0x10>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	20000014 	.word	0x20000014

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002560:	f7ff fff2 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4903      	ldr	r1, [pc, #12]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	08003d48 	.word	0x08003d48

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002588:	f7ff ffde 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	0adb      	lsrs	r3, r3, #11
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4903      	ldr	r1, [pc, #12]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	08003d48 	.word	0x08003d48

080025ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <RCC_Delay+0x34>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <RCC_Delay+0x38>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0a5b      	lsrs	r3, r3, #9
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025c8:	bf00      	nop
  }
  while (Delay --);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e5a      	subs	r2, r3, #1
 80025ce:	60fa      	str	r2, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f9      	bne.n	80025c8 <RCC_Delay+0x1c>
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	20000014 	.word	0x20000014
 80025e4:	10624dd3 	.word	0x10624dd3

080025e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d07d      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002608:	4b4f      	ldr	r3, [pc, #316]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10d      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	4b4c      	ldr	r3, [pc, #304]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4a4b      	ldr	r2, [pc, #300]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261e:	61d3      	str	r3, [r2, #28]
 8002620:	4b49      	ldr	r3, [pc, #292]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262c:	2301      	movs	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d118      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a42      	ldr	r2, [pc, #264]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002646:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002648:	f7fe fcd4 	bl	8000ff4 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	e008      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002650:	f7fe fcd0 	bl	8000ff4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e06d      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002662:	4b3a      	ldr	r3, [pc, #232]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002676:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d02e      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d027      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800268c:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002694:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002696:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800269c:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026a2:	4a29      	ldr	r2, [pc, #164]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d014      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe fc9f 	bl	8000ff4 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe fc9b 	bl	8000ff4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e036      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ee      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4917      	ldr	r1, [pc, #92]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d105      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4a13      	ldr	r2, [pc, #76]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	490b      	ldr	r1, [pc, #44]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	4904      	ldr	r1, [pc, #16]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	40007000 	.word	0x40007000
 8002750:	42420440 	.word	0x42420440

08002754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e041      	b.n	80027ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe faa2 	bl	8000cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f000 fa6e 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d001      	beq.n	800280c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e035      	b.n	8002878 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_TIM_Base_Start_IT+0x90>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_TIM_Base_Start_IT+0x4e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002836:	d004      	beq.n	8002842 <HAL_TIM_Base_Start_IT+0x4e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_TIM_Base_Start_IT+0x94>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d111      	bne.n	8002866 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b06      	cmp	r3, #6
 8002852:	d010      	beq.n	8002876 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002864:	e007      	b.n	8002876 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40000400 	.word	0x40000400

0800288c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d122      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d11b      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0202 	mvn.w	r2, #2
 80028b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f9b4 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f9a7 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f9b6 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d122      	bne.n	800293c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b04      	cmp	r3, #4
 8002902:	d11b      	bne.n	800293c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0204 	mvn.w	r2, #4
 800290c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2202      	movs	r2, #2
 8002912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f98a 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f97d 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f98c 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d122      	bne.n	8002990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b08      	cmp	r3, #8
 8002956:	d11b      	bne.n	8002990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0208 	mvn.w	r2, #8
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2204      	movs	r2, #4
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f960 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f953 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f962 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b10      	cmp	r3, #16
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0210 	mvn.w	r2, #16
 80029b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2208      	movs	r2, #8
 80029ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f936 	bl	8002c3c <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f929 	bl	8002c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f938 	bl	8002c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d10e      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d107      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0201 	mvn.w	r2, #1
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe f8e4 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b80      	cmp	r3, #128	; 0x80
 8002a1c:	d10e      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d107      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa6b 	bl	8002f12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d10e      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d107      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f8fc 	bl	8002c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d10e      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d107      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0220 	mvn.w	r2, #32
 8002a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa36 	bl	8002f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e0b4      	b.n	8002c22 <HAL_TIM_ConfigClockSource+0x186>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af0:	d03e      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0xd4>
 8002af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af6:	f200 8087 	bhi.w	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afe:	f000 8086 	beq.w	8002c0e <HAL_TIM_ConfigClockSource+0x172>
 8002b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b06:	d87f      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b70      	cmp	r3, #112	; 0x70
 8002b0a:	d01a      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0xa6>
 8002b0c:	2b70      	cmp	r3, #112	; 0x70
 8002b0e:	d87b      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b60      	cmp	r3, #96	; 0x60
 8002b12:	d050      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x11a>
 8002b14:	2b60      	cmp	r3, #96	; 0x60
 8002b16:	d877      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b50      	cmp	r3, #80	; 0x50
 8002b1a:	d03c      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0xfa>
 8002b1c:	2b50      	cmp	r3, #80	; 0x50
 8002b1e:	d873      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d058      	beq.n	8002bd6 <HAL_TIM_ConfigClockSource+0x13a>
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d86f      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b30      	cmp	r3, #48	; 0x30
 8002b2a:	d064      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b2c:	2b30      	cmp	r3, #48	; 0x30
 8002b2e:	d86b      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d060      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d867      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d05c      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d05a      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b40:	e062      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b52:	f000 f95e 	bl	8002e12 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	609a      	str	r2, [r3, #8]
      break;
 8002b6e:	e04f      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b80:	f000 f947 	bl	8002e12 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b92:	609a      	str	r2, [r3, #8]
      break;
 8002b94:	e03c      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f000 f8be 	bl	8002d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2150      	movs	r1, #80	; 0x50
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f915 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002bb4:	e02c      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f000 f8dc 	bl	8002d80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2160      	movs	r1, #96	; 0x60
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f905 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002bd4:	e01c      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be2:	461a      	mov	r2, r3
 8002be4:	f000 f89e 	bl	8002d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2140      	movs	r1, #64	; 0x40
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f8f5 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002bf4:	e00c      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f000 f8ec 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002c06:	e003      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0c:	e000      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
	...

08002c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a25      	ldr	r2, [pc, #148]	; (8002d1c <TIM_Base_SetConfig+0xa8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d007      	beq.n	8002c9c <TIM_Base_SetConfig+0x28>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c92:	d003      	beq.n	8002c9c <TIM_Base_SetConfig+0x28>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <TIM_Base_SetConfig+0xac>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d108      	bne.n	8002cae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a1a      	ldr	r2, [pc, #104]	; (8002d1c <TIM_Base_SetConfig+0xa8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <TIM_Base_SetConfig+0x52>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbc:	d003      	beq.n	8002cc6 <TIM_Base_SetConfig+0x52>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <TIM_Base_SetConfig+0xac>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d108      	bne.n	8002cd8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a07      	ldr	r2, [pc, #28]	; (8002d1c <TIM_Base_SetConfig+0xa8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d103      	bne.n	8002d0c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	615a      	str	r2, [r3, #20]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40000400 	.word	0x40000400

08002d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 0201 	bic.w	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 030a 	bic.w	r3, r3, #10
 8002d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0210 	bic.w	r2, r3, #16
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	031b      	lsls	r3, r3, #12
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	621a      	str	r2, [r3, #32]
}
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f043 0307 	orr.w	r3, r3, #7
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	609a      	str	r2, [r3, #8]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b087      	sub	sp, #28
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	021a      	lsls	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	609a      	str	r2, [r3, #8]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e041      	b.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10c      	bne.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40000400 	.word	0x40000400

08002f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e042      	b.n	8002fbc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fd fede 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2224      	movs	r2, #36	; 0x24
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f97b 	bl	8003264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d16d      	bne.n	80030c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_UART_Transmit+0x2c>
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e066      	b.n	80030c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2221      	movs	r2, #33	; 0x21
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003002:	f7fd fff7 	bl	8000ff4 <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	88fa      	ldrh	r2, [r7, #6]
 8003012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301c:	d108      	bne.n	8003030 <HAL_UART_Transmit+0x6c>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	e003      	b.n	8003038 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003038:	e02a      	b.n	8003090 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2200      	movs	r2, #0
 8003042:	2180      	movs	r1, #128	; 0x80
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f865 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e036      	b.n	80030c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10b      	bne.n	8003072 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003068:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	3302      	adds	r3, #2
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	e007      	b.n	8003082 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	3301      	adds	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1cf      	bne.n	800303a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2140      	movs	r1, #64	; 0x40
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f835 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e006      	b.n	80030c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	4613      	mov	r3, r2
 80030d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d112      	bne.n	800310a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_UART_Receive_IT+0x26>
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e00b      	b.n	800310c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f875 	bl	80031f0 <UART_Start_Receive_IT>
 8003106:	4603      	mov	r3, r0
 8003108:	e000      	b.n	800310c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b090      	sub	sp, #64	; 0x40
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003124:	e050      	b.n	80031c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d04c      	beq.n	80031c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800312e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <UART_WaitOnFlagUntilTimeout+0x30>
 8003134:	f7fd ff5e 	bl	8000ff4 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003140:	429a      	cmp	r2, r3
 8003142:	d241      	bcs.n	80031c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	330c      	adds	r3, #12
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	e853 3f00 	ldrex	r3, [r3]
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	330c      	adds	r3, #12
 8003162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003164:	637a      	str	r2, [r7, #52]	; 0x34
 8003166:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800316a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e5      	bne.n	8003144 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3314      	adds	r3, #20
 800317e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	613b      	str	r3, [r7, #16]
   return(result);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3314      	adds	r3, #20
 8003196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003198:	623a      	str	r2, [r7, #32]
 800319a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	69f9      	ldr	r1, [r7, #28]
 800319e:	6a3a      	ldr	r2, [r7, #32]
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e5      	bne.n	8003178 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e00f      	b.n	80031e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4013      	ands	r3, r2
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d09f      	beq.n	8003126 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3740      	adds	r7, #64	; 0x40
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	4613      	mov	r3, r2
 80031fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	88fa      	ldrh	r2, [r7, #6]
 8003208:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	88fa      	ldrh	r2, [r7, #6]
 800320e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2222      	movs	r2, #34	; 0x22
 800321a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003234:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0220 	orr.w	r2, r2, #32
 8003254:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
	...

08003264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800329e:	f023 030c 	bic.w	r3, r3, #12
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2c      	ldr	r2, [pc, #176]	; (8003378 <UART_SetConfig+0x114>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d103      	bne.n	80032d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032cc:	f7ff f95a 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	e002      	b.n	80032da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7ff f942 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 80032d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	009a      	lsls	r2, r3, #2
 80032e4:	441a      	add	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	4a22      	ldr	r2, [pc, #136]	; (800337c <UART_SetConfig+0x118>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	0119      	lsls	r1, r3, #4
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	009a      	lsls	r2, r3, #2
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003310:	4b1a      	ldr	r3, [pc, #104]	; (800337c <UART_SetConfig+0x118>)
 8003312:	fba3 0302 	umull	r0, r3, r3, r2
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2064      	movs	r0, #100	; 0x64
 800331a:	fb00 f303 	mul.w	r3, r0, r3
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	3332      	adds	r3, #50	; 0x32
 8003324:	4a15      	ldr	r2, [pc, #84]	; (800337c <UART_SetConfig+0x118>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003330:	4419      	add	r1, r3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009a      	lsls	r2, r3, #2
 800333c:	441a      	add	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	fbb2 f2f3 	udiv	r2, r2, r3
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <UART_SetConfig+0x118>)
 800334a:	fba3 0302 	umull	r0, r3, r3, r2
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2064      	movs	r0, #100	; 0x64
 8003352:	fb00 f303 	mul.w	r3, r0, r3
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	3332      	adds	r3, #50	; 0x32
 800335c:	4a07      	ldr	r2, [pc, #28]	; (800337c <UART_SetConfig+0x118>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	f003 020f 	and.w	r2, r3, #15
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	440a      	add	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40013800 	.word	0x40013800
 800337c:	51eb851f 	.word	0x51eb851f

08003380 <siprintf>:
 8003380:	b40e      	push	{r1, r2, r3}
 8003382:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003386:	b500      	push	{lr}
 8003388:	b09c      	sub	sp, #112	; 0x70
 800338a:	ab1d      	add	r3, sp, #116	; 0x74
 800338c:	9002      	str	r0, [sp, #8]
 800338e:	9006      	str	r0, [sp, #24]
 8003390:	9107      	str	r1, [sp, #28]
 8003392:	9104      	str	r1, [sp, #16]
 8003394:	4808      	ldr	r0, [pc, #32]	; (80033b8 <siprintf+0x38>)
 8003396:	4909      	ldr	r1, [pc, #36]	; (80033bc <siprintf+0x3c>)
 8003398:	f853 2b04 	ldr.w	r2, [r3], #4
 800339c:	9105      	str	r1, [sp, #20]
 800339e:	6800      	ldr	r0, [r0, #0]
 80033a0:	a902      	add	r1, sp, #8
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	f000 f98e 	bl	80036c4 <_svfiprintf_r>
 80033a8:	2200      	movs	r2, #0
 80033aa:	9b02      	ldr	r3, [sp, #8]
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	b01c      	add	sp, #112	; 0x70
 80033b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80033b4:	b003      	add	sp, #12
 80033b6:	4770      	bx	lr
 80033b8:	20000070 	.word	0x20000070
 80033bc:	ffff0208 	.word	0xffff0208

080033c0 <memset>:
 80033c0:	4603      	mov	r3, r0
 80033c2:	4402      	add	r2, r0
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d100      	bne.n	80033ca <memset+0xa>
 80033c8:	4770      	bx	lr
 80033ca:	f803 1b01 	strb.w	r1, [r3], #1
 80033ce:	e7f9      	b.n	80033c4 <memset+0x4>

080033d0 <__errno>:
 80033d0:	4b01      	ldr	r3, [pc, #4]	; (80033d8 <__errno+0x8>)
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000070 	.word	0x20000070

080033dc <__libc_init_array>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	2600      	movs	r6, #0
 80033e0:	4d0c      	ldr	r5, [pc, #48]	; (8003414 <__libc_init_array+0x38>)
 80033e2:	4c0d      	ldr	r4, [pc, #52]	; (8003418 <__libc_init_array+0x3c>)
 80033e4:	1b64      	subs	r4, r4, r5
 80033e6:	10a4      	asrs	r4, r4, #2
 80033e8:	42a6      	cmp	r6, r4
 80033ea:	d109      	bne.n	8003400 <__libc_init_array+0x24>
 80033ec:	f000 fc7a 	bl	8003ce4 <_init>
 80033f0:	2600      	movs	r6, #0
 80033f2:	4d0a      	ldr	r5, [pc, #40]	; (800341c <__libc_init_array+0x40>)
 80033f4:	4c0a      	ldr	r4, [pc, #40]	; (8003420 <__libc_init_array+0x44>)
 80033f6:	1b64      	subs	r4, r4, r5
 80033f8:	10a4      	asrs	r4, r4, #2
 80033fa:	42a6      	cmp	r6, r4
 80033fc:	d105      	bne.n	800340a <__libc_init_array+0x2e>
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
 8003400:	f855 3b04 	ldr.w	r3, [r5], #4
 8003404:	4798      	blx	r3
 8003406:	3601      	adds	r6, #1
 8003408:	e7ee      	b.n	80033e8 <__libc_init_array+0xc>
 800340a:	f855 3b04 	ldr.w	r3, [r5], #4
 800340e:	4798      	blx	r3
 8003410:	3601      	adds	r6, #1
 8003412:	e7f2      	b.n	80033fa <__libc_init_array+0x1e>
 8003414:	08003d98 	.word	0x08003d98
 8003418:	08003d98 	.word	0x08003d98
 800341c:	08003d98 	.word	0x08003d98
 8003420:	08003d9c 	.word	0x08003d9c

08003424 <__retarget_lock_acquire_recursive>:
 8003424:	4770      	bx	lr

08003426 <__retarget_lock_release_recursive>:
 8003426:	4770      	bx	lr

08003428 <_free_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4605      	mov	r5, r0
 800342c:	2900      	cmp	r1, #0
 800342e:	d040      	beq.n	80034b2 <_free_r+0x8a>
 8003430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003434:	1f0c      	subs	r4, r1, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfb8      	it	lt
 800343a:	18e4      	addlt	r4, r4, r3
 800343c:	f000 f8dc 	bl	80035f8 <__malloc_lock>
 8003440:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <_free_r+0x8c>)
 8003442:	6813      	ldr	r3, [r2, #0]
 8003444:	b933      	cbnz	r3, 8003454 <_free_r+0x2c>
 8003446:	6063      	str	r3, [r4, #4]
 8003448:	6014      	str	r4, [r2, #0]
 800344a:	4628      	mov	r0, r5
 800344c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003450:	f000 b8d8 	b.w	8003604 <__malloc_unlock>
 8003454:	42a3      	cmp	r3, r4
 8003456:	d908      	bls.n	800346a <_free_r+0x42>
 8003458:	6820      	ldr	r0, [r4, #0]
 800345a:	1821      	adds	r1, r4, r0
 800345c:	428b      	cmp	r3, r1
 800345e:	bf01      	itttt	eq
 8003460:	6819      	ldreq	r1, [r3, #0]
 8003462:	685b      	ldreq	r3, [r3, #4]
 8003464:	1809      	addeq	r1, r1, r0
 8003466:	6021      	streq	r1, [r4, #0]
 8003468:	e7ed      	b.n	8003446 <_free_r+0x1e>
 800346a:	461a      	mov	r2, r3
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b10b      	cbz	r3, 8003474 <_free_r+0x4c>
 8003470:	42a3      	cmp	r3, r4
 8003472:	d9fa      	bls.n	800346a <_free_r+0x42>
 8003474:	6811      	ldr	r1, [r2, #0]
 8003476:	1850      	adds	r0, r2, r1
 8003478:	42a0      	cmp	r0, r4
 800347a:	d10b      	bne.n	8003494 <_free_r+0x6c>
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	4401      	add	r1, r0
 8003480:	1850      	adds	r0, r2, r1
 8003482:	4283      	cmp	r3, r0
 8003484:	6011      	str	r1, [r2, #0]
 8003486:	d1e0      	bne.n	800344a <_free_r+0x22>
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4408      	add	r0, r1
 800348e:	6010      	str	r0, [r2, #0]
 8003490:	6053      	str	r3, [r2, #4]
 8003492:	e7da      	b.n	800344a <_free_r+0x22>
 8003494:	d902      	bls.n	800349c <_free_r+0x74>
 8003496:	230c      	movs	r3, #12
 8003498:	602b      	str	r3, [r5, #0]
 800349a:	e7d6      	b.n	800344a <_free_r+0x22>
 800349c:	6820      	ldr	r0, [r4, #0]
 800349e:	1821      	adds	r1, r4, r0
 80034a0:	428b      	cmp	r3, r1
 80034a2:	bf01      	itttt	eq
 80034a4:	6819      	ldreq	r1, [r3, #0]
 80034a6:	685b      	ldreq	r3, [r3, #4]
 80034a8:	1809      	addeq	r1, r1, r0
 80034aa:	6021      	streq	r1, [r4, #0]
 80034ac:	6063      	str	r3, [r4, #4]
 80034ae:	6054      	str	r4, [r2, #4]
 80034b0:	e7cb      	b.n	800344a <_free_r+0x22>
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	200002c4 	.word	0x200002c4

080034b8 <sbrk_aligned>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	4e0e      	ldr	r6, [pc, #56]	; (80034f4 <sbrk_aligned+0x3c>)
 80034bc:	460c      	mov	r4, r1
 80034be:	6831      	ldr	r1, [r6, #0]
 80034c0:	4605      	mov	r5, r0
 80034c2:	b911      	cbnz	r1, 80034ca <sbrk_aligned+0x12>
 80034c4:	f000 fbaa 	bl	8003c1c <_sbrk_r>
 80034c8:	6030      	str	r0, [r6, #0]
 80034ca:	4621      	mov	r1, r4
 80034cc:	4628      	mov	r0, r5
 80034ce:	f000 fba5 	bl	8003c1c <_sbrk_r>
 80034d2:	1c43      	adds	r3, r0, #1
 80034d4:	d00a      	beq.n	80034ec <sbrk_aligned+0x34>
 80034d6:	1cc4      	adds	r4, r0, #3
 80034d8:	f024 0403 	bic.w	r4, r4, #3
 80034dc:	42a0      	cmp	r0, r4
 80034de:	d007      	beq.n	80034f0 <sbrk_aligned+0x38>
 80034e0:	1a21      	subs	r1, r4, r0
 80034e2:	4628      	mov	r0, r5
 80034e4:	f000 fb9a 	bl	8003c1c <_sbrk_r>
 80034e8:	3001      	adds	r0, #1
 80034ea:	d101      	bne.n	80034f0 <sbrk_aligned+0x38>
 80034ec:	f04f 34ff 	mov.w	r4, #4294967295
 80034f0:	4620      	mov	r0, r4
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	200002c8 	.word	0x200002c8

080034f8 <_malloc_r>:
 80034f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034fc:	1ccd      	adds	r5, r1, #3
 80034fe:	f025 0503 	bic.w	r5, r5, #3
 8003502:	3508      	adds	r5, #8
 8003504:	2d0c      	cmp	r5, #12
 8003506:	bf38      	it	cc
 8003508:	250c      	movcc	r5, #12
 800350a:	2d00      	cmp	r5, #0
 800350c:	4607      	mov	r7, r0
 800350e:	db01      	blt.n	8003514 <_malloc_r+0x1c>
 8003510:	42a9      	cmp	r1, r5
 8003512:	d905      	bls.n	8003520 <_malloc_r+0x28>
 8003514:	230c      	movs	r3, #12
 8003516:	2600      	movs	r6, #0
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	4630      	mov	r0, r6
 800351c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003520:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80035f4 <_malloc_r+0xfc>
 8003524:	f000 f868 	bl	80035f8 <__malloc_lock>
 8003528:	f8d8 3000 	ldr.w	r3, [r8]
 800352c:	461c      	mov	r4, r3
 800352e:	bb5c      	cbnz	r4, 8003588 <_malloc_r+0x90>
 8003530:	4629      	mov	r1, r5
 8003532:	4638      	mov	r0, r7
 8003534:	f7ff ffc0 	bl	80034b8 <sbrk_aligned>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	4604      	mov	r4, r0
 800353c:	d155      	bne.n	80035ea <_malloc_r+0xf2>
 800353e:	f8d8 4000 	ldr.w	r4, [r8]
 8003542:	4626      	mov	r6, r4
 8003544:	2e00      	cmp	r6, #0
 8003546:	d145      	bne.n	80035d4 <_malloc_r+0xdc>
 8003548:	2c00      	cmp	r4, #0
 800354a:	d048      	beq.n	80035de <_malloc_r+0xe6>
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	4631      	mov	r1, r6
 8003550:	4638      	mov	r0, r7
 8003552:	eb04 0903 	add.w	r9, r4, r3
 8003556:	f000 fb61 	bl	8003c1c <_sbrk_r>
 800355a:	4581      	cmp	r9, r0
 800355c:	d13f      	bne.n	80035de <_malloc_r+0xe6>
 800355e:	6821      	ldr	r1, [r4, #0]
 8003560:	4638      	mov	r0, r7
 8003562:	1a6d      	subs	r5, r5, r1
 8003564:	4629      	mov	r1, r5
 8003566:	f7ff ffa7 	bl	80034b8 <sbrk_aligned>
 800356a:	3001      	adds	r0, #1
 800356c:	d037      	beq.n	80035de <_malloc_r+0xe6>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	442b      	add	r3, r5
 8003572:	6023      	str	r3, [r4, #0]
 8003574:	f8d8 3000 	ldr.w	r3, [r8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d038      	beq.n	80035ee <_malloc_r+0xf6>
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	42a2      	cmp	r2, r4
 8003580:	d12b      	bne.n	80035da <_malloc_r+0xe2>
 8003582:	2200      	movs	r2, #0
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	e00f      	b.n	80035a8 <_malloc_r+0xb0>
 8003588:	6822      	ldr	r2, [r4, #0]
 800358a:	1b52      	subs	r2, r2, r5
 800358c:	d41f      	bmi.n	80035ce <_malloc_r+0xd6>
 800358e:	2a0b      	cmp	r2, #11
 8003590:	d917      	bls.n	80035c2 <_malloc_r+0xca>
 8003592:	1961      	adds	r1, r4, r5
 8003594:	42a3      	cmp	r3, r4
 8003596:	6025      	str	r5, [r4, #0]
 8003598:	bf18      	it	ne
 800359a:	6059      	strne	r1, [r3, #4]
 800359c:	6863      	ldr	r3, [r4, #4]
 800359e:	bf08      	it	eq
 80035a0:	f8c8 1000 	streq.w	r1, [r8]
 80035a4:	5162      	str	r2, [r4, r5]
 80035a6:	604b      	str	r3, [r1, #4]
 80035a8:	4638      	mov	r0, r7
 80035aa:	f104 060b 	add.w	r6, r4, #11
 80035ae:	f000 f829 	bl	8003604 <__malloc_unlock>
 80035b2:	f026 0607 	bic.w	r6, r6, #7
 80035b6:	1d23      	adds	r3, r4, #4
 80035b8:	1af2      	subs	r2, r6, r3
 80035ba:	d0ae      	beq.n	800351a <_malloc_r+0x22>
 80035bc:	1b9b      	subs	r3, r3, r6
 80035be:	50a3      	str	r3, [r4, r2]
 80035c0:	e7ab      	b.n	800351a <_malloc_r+0x22>
 80035c2:	42a3      	cmp	r3, r4
 80035c4:	6862      	ldr	r2, [r4, #4]
 80035c6:	d1dd      	bne.n	8003584 <_malloc_r+0x8c>
 80035c8:	f8c8 2000 	str.w	r2, [r8]
 80035cc:	e7ec      	b.n	80035a8 <_malloc_r+0xb0>
 80035ce:	4623      	mov	r3, r4
 80035d0:	6864      	ldr	r4, [r4, #4]
 80035d2:	e7ac      	b.n	800352e <_malloc_r+0x36>
 80035d4:	4634      	mov	r4, r6
 80035d6:	6876      	ldr	r6, [r6, #4]
 80035d8:	e7b4      	b.n	8003544 <_malloc_r+0x4c>
 80035da:	4613      	mov	r3, r2
 80035dc:	e7cc      	b.n	8003578 <_malloc_r+0x80>
 80035de:	230c      	movs	r3, #12
 80035e0:	4638      	mov	r0, r7
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	f000 f80e 	bl	8003604 <__malloc_unlock>
 80035e8:	e797      	b.n	800351a <_malloc_r+0x22>
 80035ea:	6025      	str	r5, [r4, #0]
 80035ec:	e7dc      	b.n	80035a8 <_malloc_r+0xb0>
 80035ee:	605b      	str	r3, [r3, #4]
 80035f0:	deff      	udf	#255	; 0xff
 80035f2:	bf00      	nop
 80035f4:	200002c4 	.word	0x200002c4

080035f8 <__malloc_lock>:
 80035f8:	4801      	ldr	r0, [pc, #4]	; (8003600 <__malloc_lock+0x8>)
 80035fa:	f7ff bf13 	b.w	8003424 <__retarget_lock_acquire_recursive>
 80035fe:	bf00      	nop
 8003600:	200002c0 	.word	0x200002c0

08003604 <__malloc_unlock>:
 8003604:	4801      	ldr	r0, [pc, #4]	; (800360c <__malloc_unlock+0x8>)
 8003606:	f7ff bf0e 	b.w	8003426 <__retarget_lock_release_recursive>
 800360a:	bf00      	nop
 800360c:	200002c0 	.word	0x200002c0

08003610 <__ssputs_r>:
 8003610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003614:	461f      	mov	r7, r3
 8003616:	688e      	ldr	r6, [r1, #8]
 8003618:	4682      	mov	sl, r0
 800361a:	42be      	cmp	r6, r7
 800361c:	460c      	mov	r4, r1
 800361e:	4690      	mov	r8, r2
 8003620:	680b      	ldr	r3, [r1, #0]
 8003622:	d82c      	bhi.n	800367e <__ssputs_r+0x6e>
 8003624:	898a      	ldrh	r2, [r1, #12]
 8003626:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800362a:	d026      	beq.n	800367a <__ssputs_r+0x6a>
 800362c:	6965      	ldr	r5, [r4, #20]
 800362e:	6909      	ldr	r1, [r1, #16]
 8003630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003634:	eba3 0901 	sub.w	r9, r3, r1
 8003638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800363c:	1c7b      	adds	r3, r7, #1
 800363e:	444b      	add	r3, r9
 8003640:	106d      	asrs	r5, r5, #1
 8003642:	429d      	cmp	r5, r3
 8003644:	bf38      	it	cc
 8003646:	461d      	movcc	r5, r3
 8003648:	0553      	lsls	r3, r2, #21
 800364a:	d527      	bpl.n	800369c <__ssputs_r+0x8c>
 800364c:	4629      	mov	r1, r5
 800364e:	f7ff ff53 	bl	80034f8 <_malloc_r>
 8003652:	4606      	mov	r6, r0
 8003654:	b360      	cbz	r0, 80036b0 <__ssputs_r+0xa0>
 8003656:	464a      	mov	r2, r9
 8003658:	6921      	ldr	r1, [r4, #16]
 800365a:	f000 fafd 	bl	8003c58 <memcpy>
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003668:	81a3      	strh	r3, [r4, #12]
 800366a:	6126      	str	r6, [r4, #16]
 800366c:	444e      	add	r6, r9
 800366e:	6026      	str	r6, [r4, #0]
 8003670:	463e      	mov	r6, r7
 8003672:	6165      	str	r5, [r4, #20]
 8003674:	eba5 0509 	sub.w	r5, r5, r9
 8003678:	60a5      	str	r5, [r4, #8]
 800367a:	42be      	cmp	r6, r7
 800367c:	d900      	bls.n	8003680 <__ssputs_r+0x70>
 800367e:	463e      	mov	r6, r7
 8003680:	4632      	mov	r2, r6
 8003682:	4641      	mov	r1, r8
 8003684:	6820      	ldr	r0, [r4, #0]
 8003686:	f000 faaf 	bl	8003be8 <memmove>
 800368a:	2000      	movs	r0, #0
 800368c:	68a3      	ldr	r3, [r4, #8]
 800368e:	1b9b      	subs	r3, r3, r6
 8003690:	60a3      	str	r3, [r4, #8]
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	4433      	add	r3, r6
 8003696:	6023      	str	r3, [r4, #0]
 8003698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800369c:	462a      	mov	r2, r5
 800369e:	f000 fae9 	bl	8003c74 <_realloc_r>
 80036a2:	4606      	mov	r6, r0
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d1e0      	bne.n	800366a <__ssputs_r+0x5a>
 80036a8:	4650      	mov	r0, sl
 80036aa:	6921      	ldr	r1, [r4, #16]
 80036ac:	f7ff febc 	bl	8003428 <_free_r>
 80036b0:	230c      	movs	r3, #12
 80036b2:	f8ca 3000 	str.w	r3, [sl]
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036c0:	81a3      	strh	r3, [r4, #12]
 80036c2:	e7e9      	b.n	8003698 <__ssputs_r+0x88>

080036c4 <_svfiprintf_r>:
 80036c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c8:	4698      	mov	r8, r3
 80036ca:	898b      	ldrh	r3, [r1, #12]
 80036cc:	4607      	mov	r7, r0
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	460d      	mov	r5, r1
 80036d2:	4614      	mov	r4, r2
 80036d4:	b09d      	sub	sp, #116	; 0x74
 80036d6:	d50e      	bpl.n	80036f6 <_svfiprintf_r+0x32>
 80036d8:	690b      	ldr	r3, [r1, #16]
 80036da:	b963      	cbnz	r3, 80036f6 <_svfiprintf_r+0x32>
 80036dc:	2140      	movs	r1, #64	; 0x40
 80036de:	f7ff ff0b 	bl	80034f8 <_malloc_r>
 80036e2:	6028      	str	r0, [r5, #0]
 80036e4:	6128      	str	r0, [r5, #16]
 80036e6:	b920      	cbnz	r0, 80036f2 <_svfiprintf_r+0x2e>
 80036e8:	230c      	movs	r3, #12
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	e0d0      	b.n	8003894 <_svfiprintf_r+0x1d0>
 80036f2:	2340      	movs	r3, #64	; 0x40
 80036f4:	616b      	str	r3, [r5, #20]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9309      	str	r3, [sp, #36]	; 0x24
 80036fa:	2320      	movs	r3, #32
 80036fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003700:	2330      	movs	r3, #48	; 0x30
 8003702:	f04f 0901 	mov.w	r9, #1
 8003706:	f8cd 800c 	str.w	r8, [sp, #12]
 800370a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80038ac <_svfiprintf_r+0x1e8>
 800370e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003712:	4623      	mov	r3, r4
 8003714:	469a      	mov	sl, r3
 8003716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800371a:	b10a      	cbz	r2, 8003720 <_svfiprintf_r+0x5c>
 800371c:	2a25      	cmp	r2, #37	; 0x25
 800371e:	d1f9      	bne.n	8003714 <_svfiprintf_r+0x50>
 8003720:	ebba 0b04 	subs.w	fp, sl, r4
 8003724:	d00b      	beq.n	800373e <_svfiprintf_r+0x7a>
 8003726:	465b      	mov	r3, fp
 8003728:	4622      	mov	r2, r4
 800372a:	4629      	mov	r1, r5
 800372c:	4638      	mov	r0, r7
 800372e:	f7ff ff6f 	bl	8003610 <__ssputs_r>
 8003732:	3001      	adds	r0, #1
 8003734:	f000 80a9 	beq.w	800388a <_svfiprintf_r+0x1c6>
 8003738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800373a:	445a      	add	r2, fp
 800373c:	9209      	str	r2, [sp, #36]	; 0x24
 800373e:	f89a 3000 	ldrb.w	r3, [sl]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80a1 	beq.w	800388a <_svfiprintf_r+0x1c6>
 8003748:	2300      	movs	r3, #0
 800374a:	f04f 32ff 	mov.w	r2, #4294967295
 800374e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003752:	f10a 0a01 	add.w	sl, sl, #1
 8003756:	9304      	str	r3, [sp, #16]
 8003758:	9307      	str	r3, [sp, #28]
 800375a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800375e:	931a      	str	r3, [sp, #104]	; 0x68
 8003760:	4654      	mov	r4, sl
 8003762:	2205      	movs	r2, #5
 8003764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003768:	4850      	ldr	r0, [pc, #320]	; (80038ac <_svfiprintf_r+0x1e8>)
 800376a:	f000 fa67 	bl	8003c3c <memchr>
 800376e:	9a04      	ldr	r2, [sp, #16]
 8003770:	b9d8      	cbnz	r0, 80037aa <_svfiprintf_r+0xe6>
 8003772:	06d0      	lsls	r0, r2, #27
 8003774:	bf44      	itt	mi
 8003776:	2320      	movmi	r3, #32
 8003778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800377c:	0711      	lsls	r1, r2, #28
 800377e:	bf44      	itt	mi
 8003780:	232b      	movmi	r3, #43	; 0x2b
 8003782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003786:	f89a 3000 	ldrb.w	r3, [sl]
 800378a:	2b2a      	cmp	r3, #42	; 0x2a
 800378c:	d015      	beq.n	80037ba <_svfiprintf_r+0xf6>
 800378e:	4654      	mov	r4, sl
 8003790:	2000      	movs	r0, #0
 8003792:	f04f 0c0a 	mov.w	ip, #10
 8003796:	9a07      	ldr	r2, [sp, #28]
 8003798:	4621      	mov	r1, r4
 800379a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800379e:	3b30      	subs	r3, #48	; 0x30
 80037a0:	2b09      	cmp	r3, #9
 80037a2:	d94d      	bls.n	8003840 <_svfiprintf_r+0x17c>
 80037a4:	b1b0      	cbz	r0, 80037d4 <_svfiprintf_r+0x110>
 80037a6:	9207      	str	r2, [sp, #28]
 80037a8:	e014      	b.n	80037d4 <_svfiprintf_r+0x110>
 80037aa:	eba0 0308 	sub.w	r3, r0, r8
 80037ae:	fa09 f303 	lsl.w	r3, r9, r3
 80037b2:	4313      	orrs	r3, r2
 80037b4:	46a2      	mov	sl, r4
 80037b6:	9304      	str	r3, [sp, #16]
 80037b8:	e7d2      	b.n	8003760 <_svfiprintf_r+0x9c>
 80037ba:	9b03      	ldr	r3, [sp, #12]
 80037bc:	1d19      	adds	r1, r3, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	9103      	str	r1, [sp, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bfbb      	ittet	lt
 80037c6:	425b      	neglt	r3, r3
 80037c8:	f042 0202 	orrlt.w	r2, r2, #2
 80037cc:	9307      	strge	r3, [sp, #28]
 80037ce:	9307      	strlt	r3, [sp, #28]
 80037d0:	bfb8      	it	lt
 80037d2:	9204      	strlt	r2, [sp, #16]
 80037d4:	7823      	ldrb	r3, [r4, #0]
 80037d6:	2b2e      	cmp	r3, #46	; 0x2e
 80037d8:	d10c      	bne.n	80037f4 <_svfiprintf_r+0x130>
 80037da:	7863      	ldrb	r3, [r4, #1]
 80037dc:	2b2a      	cmp	r3, #42	; 0x2a
 80037de:	d134      	bne.n	800384a <_svfiprintf_r+0x186>
 80037e0:	9b03      	ldr	r3, [sp, #12]
 80037e2:	3402      	adds	r4, #2
 80037e4:	1d1a      	adds	r2, r3, #4
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	9203      	str	r2, [sp, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bfb8      	it	lt
 80037ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80037f2:	9305      	str	r3, [sp, #20]
 80037f4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80038b0 <_svfiprintf_r+0x1ec>
 80037f8:	2203      	movs	r2, #3
 80037fa:	4650      	mov	r0, sl
 80037fc:	7821      	ldrb	r1, [r4, #0]
 80037fe:	f000 fa1d 	bl	8003c3c <memchr>
 8003802:	b138      	cbz	r0, 8003814 <_svfiprintf_r+0x150>
 8003804:	2240      	movs	r2, #64	; 0x40
 8003806:	9b04      	ldr	r3, [sp, #16]
 8003808:	eba0 000a 	sub.w	r0, r0, sl
 800380c:	4082      	lsls	r2, r0
 800380e:	4313      	orrs	r3, r2
 8003810:	3401      	adds	r4, #1
 8003812:	9304      	str	r3, [sp, #16]
 8003814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003818:	2206      	movs	r2, #6
 800381a:	4826      	ldr	r0, [pc, #152]	; (80038b4 <_svfiprintf_r+0x1f0>)
 800381c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003820:	f000 fa0c 	bl	8003c3c <memchr>
 8003824:	2800      	cmp	r0, #0
 8003826:	d038      	beq.n	800389a <_svfiprintf_r+0x1d6>
 8003828:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <_svfiprintf_r+0x1f4>)
 800382a:	bb1b      	cbnz	r3, 8003874 <_svfiprintf_r+0x1b0>
 800382c:	9b03      	ldr	r3, [sp, #12]
 800382e:	3307      	adds	r3, #7
 8003830:	f023 0307 	bic.w	r3, r3, #7
 8003834:	3308      	adds	r3, #8
 8003836:	9303      	str	r3, [sp, #12]
 8003838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800383a:	4433      	add	r3, r6
 800383c:	9309      	str	r3, [sp, #36]	; 0x24
 800383e:	e768      	b.n	8003712 <_svfiprintf_r+0x4e>
 8003840:	460c      	mov	r4, r1
 8003842:	2001      	movs	r0, #1
 8003844:	fb0c 3202 	mla	r2, ip, r2, r3
 8003848:	e7a6      	b.n	8003798 <_svfiprintf_r+0xd4>
 800384a:	2300      	movs	r3, #0
 800384c:	f04f 0c0a 	mov.w	ip, #10
 8003850:	4619      	mov	r1, r3
 8003852:	3401      	adds	r4, #1
 8003854:	9305      	str	r3, [sp, #20]
 8003856:	4620      	mov	r0, r4
 8003858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800385c:	3a30      	subs	r2, #48	; 0x30
 800385e:	2a09      	cmp	r2, #9
 8003860:	d903      	bls.n	800386a <_svfiprintf_r+0x1a6>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0c6      	beq.n	80037f4 <_svfiprintf_r+0x130>
 8003866:	9105      	str	r1, [sp, #20]
 8003868:	e7c4      	b.n	80037f4 <_svfiprintf_r+0x130>
 800386a:	4604      	mov	r4, r0
 800386c:	2301      	movs	r3, #1
 800386e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003872:	e7f0      	b.n	8003856 <_svfiprintf_r+0x192>
 8003874:	ab03      	add	r3, sp, #12
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	462a      	mov	r2, r5
 800387a:	4638      	mov	r0, r7
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <_svfiprintf_r+0x1f8>)
 800387e:	a904      	add	r1, sp, #16
 8003880:	f3af 8000 	nop.w
 8003884:	1c42      	adds	r2, r0, #1
 8003886:	4606      	mov	r6, r0
 8003888:	d1d6      	bne.n	8003838 <_svfiprintf_r+0x174>
 800388a:	89ab      	ldrh	r3, [r5, #12]
 800388c:	065b      	lsls	r3, r3, #25
 800388e:	f53f af2d 	bmi.w	80036ec <_svfiprintf_r+0x28>
 8003892:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003894:	b01d      	add	sp, #116	; 0x74
 8003896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800389a:	ab03      	add	r3, sp, #12
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	462a      	mov	r2, r5
 80038a0:	4638      	mov	r0, r7
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <_svfiprintf_r+0x1f8>)
 80038a4:	a904      	add	r1, sp, #16
 80038a6:	f000 f87d 	bl	80039a4 <_printf_i>
 80038aa:	e7eb      	b.n	8003884 <_svfiprintf_r+0x1c0>
 80038ac:	08003d62 	.word	0x08003d62
 80038b0:	08003d68 	.word	0x08003d68
 80038b4:	08003d6c 	.word	0x08003d6c
 80038b8:	00000000 	.word	0x00000000
 80038bc:	08003611 	.word	0x08003611

080038c0 <_printf_common>:
 80038c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c4:	4616      	mov	r6, r2
 80038c6:	4699      	mov	r9, r3
 80038c8:	688a      	ldr	r2, [r1, #8]
 80038ca:	690b      	ldr	r3, [r1, #16]
 80038cc:	4607      	mov	r7, r0
 80038ce:	4293      	cmp	r3, r2
 80038d0:	bfb8      	it	lt
 80038d2:	4613      	movlt	r3, r2
 80038d4:	6033      	str	r3, [r6, #0]
 80038d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038da:	460c      	mov	r4, r1
 80038dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038e0:	b10a      	cbz	r2, 80038e6 <_printf_common+0x26>
 80038e2:	3301      	adds	r3, #1
 80038e4:	6033      	str	r3, [r6, #0]
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	0699      	lsls	r1, r3, #26
 80038ea:	bf42      	ittt	mi
 80038ec:	6833      	ldrmi	r3, [r6, #0]
 80038ee:	3302      	addmi	r3, #2
 80038f0:	6033      	strmi	r3, [r6, #0]
 80038f2:	6825      	ldr	r5, [r4, #0]
 80038f4:	f015 0506 	ands.w	r5, r5, #6
 80038f8:	d106      	bne.n	8003908 <_printf_common+0x48>
 80038fa:	f104 0a19 	add.w	sl, r4, #25
 80038fe:	68e3      	ldr	r3, [r4, #12]
 8003900:	6832      	ldr	r2, [r6, #0]
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	42ab      	cmp	r3, r5
 8003906:	dc2b      	bgt.n	8003960 <_printf_common+0xa0>
 8003908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800390c:	1e13      	subs	r3, r2, #0
 800390e:	6822      	ldr	r2, [r4, #0]
 8003910:	bf18      	it	ne
 8003912:	2301      	movne	r3, #1
 8003914:	0692      	lsls	r2, r2, #26
 8003916:	d430      	bmi.n	800397a <_printf_common+0xba>
 8003918:	4649      	mov	r1, r9
 800391a:	4638      	mov	r0, r7
 800391c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003920:	47c0      	blx	r8
 8003922:	3001      	adds	r0, #1
 8003924:	d023      	beq.n	800396e <_printf_common+0xae>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	6922      	ldr	r2, [r4, #16]
 800392a:	f003 0306 	and.w	r3, r3, #6
 800392e:	2b04      	cmp	r3, #4
 8003930:	bf14      	ite	ne
 8003932:	2500      	movne	r5, #0
 8003934:	6833      	ldreq	r3, [r6, #0]
 8003936:	f04f 0600 	mov.w	r6, #0
 800393a:	bf08      	it	eq
 800393c:	68e5      	ldreq	r5, [r4, #12]
 800393e:	f104 041a 	add.w	r4, r4, #26
 8003942:	bf08      	it	eq
 8003944:	1aed      	subeq	r5, r5, r3
 8003946:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800394a:	bf08      	it	eq
 800394c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003950:	4293      	cmp	r3, r2
 8003952:	bfc4      	itt	gt
 8003954:	1a9b      	subgt	r3, r3, r2
 8003956:	18ed      	addgt	r5, r5, r3
 8003958:	42b5      	cmp	r5, r6
 800395a:	d11a      	bne.n	8003992 <_printf_common+0xd2>
 800395c:	2000      	movs	r0, #0
 800395e:	e008      	b.n	8003972 <_printf_common+0xb2>
 8003960:	2301      	movs	r3, #1
 8003962:	4652      	mov	r2, sl
 8003964:	4649      	mov	r1, r9
 8003966:	4638      	mov	r0, r7
 8003968:	47c0      	blx	r8
 800396a:	3001      	adds	r0, #1
 800396c:	d103      	bne.n	8003976 <_printf_common+0xb6>
 800396e:	f04f 30ff 	mov.w	r0, #4294967295
 8003972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003976:	3501      	adds	r5, #1
 8003978:	e7c1      	b.n	80038fe <_printf_common+0x3e>
 800397a:	2030      	movs	r0, #48	; 0x30
 800397c:	18e1      	adds	r1, r4, r3
 800397e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003988:	4422      	add	r2, r4
 800398a:	3302      	adds	r3, #2
 800398c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003990:	e7c2      	b.n	8003918 <_printf_common+0x58>
 8003992:	2301      	movs	r3, #1
 8003994:	4622      	mov	r2, r4
 8003996:	4649      	mov	r1, r9
 8003998:	4638      	mov	r0, r7
 800399a:	47c0      	blx	r8
 800399c:	3001      	adds	r0, #1
 800399e:	d0e6      	beq.n	800396e <_printf_common+0xae>
 80039a0:	3601      	adds	r6, #1
 80039a2:	e7d9      	b.n	8003958 <_printf_common+0x98>

080039a4 <_printf_i>:
 80039a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039a8:	7e0f      	ldrb	r7, [r1, #24]
 80039aa:	4691      	mov	r9, r2
 80039ac:	2f78      	cmp	r7, #120	; 0x78
 80039ae:	4680      	mov	r8, r0
 80039b0:	460c      	mov	r4, r1
 80039b2:	469a      	mov	sl, r3
 80039b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039ba:	d807      	bhi.n	80039cc <_printf_i+0x28>
 80039bc:	2f62      	cmp	r7, #98	; 0x62
 80039be:	d80a      	bhi.n	80039d6 <_printf_i+0x32>
 80039c0:	2f00      	cmp	r7, #0
 80039c2:	f000 80d5 	beq.w	8003b70 <_printf_i+0x1cc>
 80039c6:	2f58      	cmp	r7, #88	; 0x58
 80039c8:	f000 80c1 	beq.w	8003b4e <_printf_i+0x1aa>
 80039cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039d4:	e03a      	b.n	8003a4c <_printf_i+0xa8>
 80039d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039da:	2b15      	cmp	r3, #21
 80039dc:	d8f6      	bhi.n	80039cc <_printf_i+0x28>
 80039de:	a101      	add	r1, pc, #4	; (adr r1, 80039e4 <_printf_i+0x40>)
 80039e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039e4:	08003a3d 	.word	0x08003a3d
 80039e8:	08003a51 	.word	0x08003a51
 80039ec:	080039cd 	.word	0x080039cd
 80039f0:	080039cd 	.word	0x080039cd
 80039f4:	080039cd 	.word	0x080039cd
 80039f8:	080039cd 	.word	0x080039cd
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	080039cd 	.word	0x080039cd
 8003a04:	080039cd 	.word	0x080039cd
 8003a08:	080039cd 	.word	0x080039cd
 8003a0c:	080039cd 	.word	0x080039cd
 8003a10:	08003b57 	.word	0x08003b57
 8003a14:	08003a7d 	.word	0x08003a7d
 8003a18:	08003b11 	.word	0x08003b11
 8003a1c:	080039cd 	.word	0x080039cd
 8003a20:	080039cd 	.word	0x080039cd
 8003a24:	08003b79 	.word	0x08003b79
 8003a28:	080039cd 	.word	0x080039cd
 8003a2c:	08003a7d 	.word	0x08003a7d
 8003a30:	080039cd 	.word	0x080039cd
 8003a34:	080039cd 	.word	0x080039cd
 8003a38:	08003b19 	.word	0x08003b19
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	1d1a      	adds	r2, r3, #4
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	602a      	str	r2, [r5, #0]
 8003a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0a0      	b.n	8003b92 <_printf_i+0x1ee>
 8003a50:	6820      	ldr	r0, [r4, #0]
 8003a52:	682b      	ldr	r3, [r5, #0]
 8003a54:	0607      	lsls	r7, r0, #24
 8003a56:	f103 0104 	add.w	r1, r3, #4
 8003a5a:	6029      	str	r1, [r5, #0]
 8003a5c:	d501      	bpl.n	8003a62 <_printf_i+0xbe>
 8003a5e:	681e      	ldr	r6, [r3, #0]
 8003a60:	e003      	b.n	8003a6a <_printf_i+0xc6>
 8003a62:	0646      	lsls	r6, r0, #25
 8003a64:	d5fb      	bpl.n	8003a5e <_printf_i+0xba>
 8003a66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a6a:	2e00      	cmp	r6, #0
 8003a6c:	da03      	bge.n	8003a76 <_printf_i+0xd2>
 8003a6e:	232d      	movs	r3, #45	; 0x2d
 8003a70:	4276      	negs	r6, r6
 8003a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a76:	230a      	movs	r3, #10
 8003a78:	4859      	ldr	r0, [pc, #356]	; (8003be0 <_printf_i+0x23c>)
 8003a7a:	e012      	b.n	8003aa2 <_printf_i+0xfe>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	6820      	ldr	r0, [r4, #0]
 8003a80:	1d19      	adds	r1, r3, #4
 8003a82:	6029      	str	r1, [r5, #0]
 8003a84:	0605      	lsls	r5, r0, #24
 8003a86:	d501      	bpl.n	8003a8c <_printf_i+0xe8>
 8003a88:	681e      	ldr	r6, [r3, #0]
 8003a8a:	e002      	b.n	8003a92 <_printf_i+0xee>
 8003a8c:	0641      	lsls	r1, r0, #25
 8003a8e:	d5fb      	bpl.n	8003a88 <_printf_i+0xe4>
 8003a90:	881e      	ldrh	r6, [r3, #0]
 8003a92:	2f6f      	cmp	r7, #111	; 0x6f
 8003a94:	bf0c      	ite	eq
 8003a96:	2308      	moveq	r3, #8
 8003a98:	230a      	movne	r3, #10
 8003a9a:	4851      	ldr	r0, [pc, #324]	; (8003be0 <_printf_i+0x23c>)
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aa2:	6865      	ldr	r5, [r4, #4]
 8003aa4:	2d00      	cmp	r5, #0
 8003aa6:	bfa8      	it	ge
 8003aa8:	6821      	ldrge	r1, [r4, #0]
 8003aaa:	60a5      	str	r5, [r4, #8]
 8003aac:	bfa4      	itt	ge
 8003aae:	f021 0104 	bicge.w	r1, r1, #4
 8003ab2:	6021      	strge	r1, [r4, #0]
 8003ab4:	b90e      	cbnz	r6, 8003aba <_printf_i+0x116>
 8003ab6:	2d00      	cmp	r5, #0
 8003ab8:	d04b      	beq.n	8003b52 <_printf_i+0x1ae>
 8003aba:	4615      	mov	r5, r2
 8003abc:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ac0:	fb03 6711 	mls	r7, r3, r1, r6
 8003ac4:	5dc7      	ldrb	r7, [r0, r7]
 8003ac6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003aca:	4637      	mov	r7, r6
 8003acc:	42bb      	cmp	r3, r7
 8003ace:	460e      	mov	r6, r1
 8003ad0:	d9f4      	bls.n	8003abc <_printf_i+0x118>
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d10b      	bne.n	8003aee <_printf_i+0x14a>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	07de      	lsls	r6, r3, #31
 8003ada:	d508      	bpl.n	8003aee <_printf_i+0x14a>
 8003adc:	6923      	ldr	r3, [r4, #16]
 8003ade:	6861      	ldr	r1, [r4, #4]
 8003ae0:	4299      	cmp	r1, r3
 8003ae2:	bfde      	ittt	le
 8003ae4:	2330      	movle	r3, #48	; 0x30
 8003ae6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003aea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003aee:	1b52      	subs	r2, r2, r5
 8003af0:	6122      	str	r2, [r4, #16]
 8003af2:	464b      	mov	r3, r9
 8003af4:	4621      	mov	r1, r4
 8003af6:	4640      	mov	r0, r8
 8003af8:	f8cd a000 	str.w	sl, [sp]
 8003afc:	aa03      	add	r2, sp, #12
 8003afe:	f7ff fedf 	bl	80038c0 <_printf_common>
 8003b02:	3001      	adds	r0, #1
 8003b04:	d14a      	bne.n	8003b9c <_printf_i+0x1f8>
 8003b06:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0a:	b004      	add	sp, #16
 8003b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	f043 0320 	orr.w	r3, r3, #32
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	2778      	movs	r7, #120	; 0x78
 8003b1a:	4832      	ldr	r0, [pc, #200]	; (8003be4 <_printf_i+0x240>)
 8003b1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	6829      	ldr	r1, [r5, #0]
 8003b24:	061f      	lsls	r7, r3, #24
 8003b26:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b2a:	d402      	bmi.n	8003b32 <_printf_i+0x18e>
 8003b2c:	065f      	lsls	r7, r3, #25
 8003b2e:	bf48      	it	mi
 8003b30:	b2b6      	uxthmi	r6, r6
 8003b32:	07df      	lsls	r7, r3, #31
 8003b34:	bf48      	it	mi
 8003b36:	f043 0320 	orrmi.w	r3, r3, #32
 8003b3a:	6029      	str	r1, [r5, #0]
 8003b3c:	bf48      	it	mi
 8003b3e:	6023      	strmi	r3, [r4, #0]
 8003b40:	b91e      	cbnz	r6, 8003b4a <_printf_i+0x1a6>
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	f023 0320 	bic.w	r3, r3, #32
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	e7a6      	b.n	8003a9c <_printf_i+0xf8>
 8003b4e:	4824      	ldr	r0, [pc, #144]	; (8003be0 <_printf_i+0x23c>)
 8003b50:	e7e4      	b.n	8003b1c <_printf_i+0x178>
 8003b52:	4615      	mov	r5, r2
 8003b54:	e7bd      	b.n	8003ad2 <_printf_i+0x12e>
 8003b56:	682b      	ldr	r3, [r5, #0]
 8003b58:	6826      	ldr	r6, [r4, #0]
 8003b5a:	1d18      	adds	r0, r3, #4
 8003b5c:	6961      	ldr	r1, [r4, #20]
 8003b5e:	6028      	str	r0, [r5, #0]
 8003b60:	0635      	lsls	r5, r6, #24
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	d501      	bpl.n	8003b6a <_printf_i+0x1c6>
 8003b66:	6019      	str	r1, [r3, #0]
 8003b68:	e002      	b.n	8003b70 <_printf_i+0x1cc>
 8003b6a:	0670      	lsls	r0, r6, #25
 8003b6c:	d5fb      	bpl.n	8003b66 <_printf_i+0x1c2>
 8003b6e:	8019      	strh	r1, [r3, #0]
 8003b70:	2300      	movs	r3, #0
 8003b72:	4615      	mov	r5, r2
 8003b74:	6123      	str	r3, [r4, #16]
 8003b76:	e7bc      	b.n	8003af2 <_printf_i+0x14e>
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	1d1a      	adds	r2, r3, #4
 8003b7e:	602a      	str	r2, [r5, #0]
 8003b80:	681d      	ldr	r5, [r3, #0]
 8003b82:	6862      	ldr	r2, [r4, #4]
 8003b84:	4628      	mov	r0, r5
 8003b86:	f000 f859 	bl	8003c3c <memchr>
 8003b8a:	b108      	cbz	r0, 8003b90 <_printf_i+0x1ec>
 8003b8c:	1b40      	subs	r0, r0, r5
 8003b8e:	6060      	str	r0, [r4, #4]
 8003b90:	6863      	ldr	r3, [r4, #4]
 8003b92:	6123      	str	r3, [r4, #16]
 8003b94:	2300      	movs	r3, #0
 8003b96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b9a:	e7aa      	b.n	8003af2 <_printf_i+0x14e>
 8003b9c:	462a      	mov	r2, r5
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	4640      	mov	r0, r8
 8003ba2:	6923      	ldr	r3, [r4, #16]
 8003ba4:	47d0      	blx	sl
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d0ad      	beq.n	8003b06 <_printf_i+0x162>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	079b      	lsls	r3, r3, #30
 8003bae:	d413      	bmi.n	8003bd8 <_printf_i+0x234>
 8003bb0:	68e0      	ldr	r0, [r4, #12]
 8003bb2:	9b03      	ldr	r3, [sp, #12]
 8003bb4:	4298      	cmp	r0, r3
 8003bb6:	bfb8      	it	lt
 8003bb8:	4618      	movlt	r0, r3
 8003bba:	e7a6      	b.n	8003b0a <_printf_i+0x166>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4632      	mov	r2, r6
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	47d0      	blx	sl
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d09d      	beq.n	8003b06 <_printf_i+0x162>
 8003bca:	3501      	adds	r5, #1
 8003bcc:	68e3      	ldr	r3, [r4, #12]
 8003bce:	9903      	ldr	r1, [sp, #12]
 8003bd0:	1a5b      	subs	r3, r3, r1
 8003bd2:	42ab      	cmp	r3, r5
 8003bd4:	dcf2      	bgt.n	8003bbc <_printf_i+0x218>
 8003bd6:	e7eb      	b.n	8003bb0 <_printf_i+0x20c>
 8003bd8:	2500      	movs	r5, #0
 8003bda:	f104 0619 	add.w	r6, r4, #25
 8003bde:	e7f5      	b.n	8003bcc <_printf_i+0x228>
 8003be0:	08003d73 	.word	0x08003d73
 8003be4:	08003d84 	.word	0x08003d84

08003be8 <memmove>:
 8003be8:	4288      	cmp	r0, r1
 8003bea:	b510      	push	{r4, lr}
 8003bec:	eb01 0402 	add.w	r4, r1, r2
 8003bf0:	d902      	bls.n	8003bf8 <memmove+0x10>
 8003bf2:	4284      	cmp	r4, r0
 8003bf4:	4623      	mov	r3, r4
 8003bf6:	d807      	bhi.n	8003c08 <memmove+0x20>
 8003bf8:	1e43      	subs	r3, r0, #1
 8003bfa:	42a1      	cmp	r1, r4
 8003bfc:	d008      	beq.n	8003c10 <memmove+0x28>
 8003bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c06:	e7f8      	b.n	8003bfa <memmove+0x12>
 8003c08:	4601      	mov	r1, r0
 8003c0a:	4402      	add	r2, r0
 8003c0c:	428a      	cmp	r2, r1
 8003c0e:	d100      	bne.n	8003c12 <memmove+0x2a>
 8003c10:	bd10      	pop	{r4, pc}
 8003c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c1a:	e7f7      	b.n	8003c0c <memmove+0x24>

08003c1c <_sbrk_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	2300      	movs	r3, #0
 8003c20:	4d05      	ldr	r5, [pc, #20]	; (8003c38 <_sbrk_r+0x1c>)
 8003c22:	4604      	mov	r4, r0
 8003c24:	4608      	mov	r0, r1
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	f7fd f8f6 	bl	8000e18 <_sbrk>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d102      	bne.n	8003c36 <_sbrk_r+0x1a>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b103      	cbz	r3, 8003c36 <_sbrk_r+0x1a>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	200002bc 	.word	0x200002bc

08003c3c <memchr>:
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	b2c9      	uxtb	r1, r1
 8003c42:	4402      	add	r2, r0
 8003c44:	4293      	cmp	r3, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	d101      	bne.n	8003c4e <memchr+0x12>
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	e003      	b.n	8003c56 <memchr+0x1a>
 8003c4e:	7804      	ldrb	r4, [r0, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	428c      	cmp	r4, r1
 8003c54:	d1f6      	bne.n	8003c44 <memchr+0x8>
 8003c56:	bd10      	pop	{r4, pc}

08003c58 <memcpy>:
 8003c58:	440a      	add	r2, r1
 8003c5a:	4291      	cmp	r1, r2
 8003c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c60:	d100      	bne.n	8003c64 <memcpy+0xc>
 8003c62:	4770      	bx	lr
 8003c64:	b510      	push	{r4, lr}
 8003c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c6a:	4291      	cmp	r1, r2
 8003c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c70:	d1f9      	bne.n	8003c66 <memcpy+0xe>
 8003c72:	bd10      	pop	{r4, pc}

08003c74 <_realloc_r>:
 8003c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c78:	4680      	mov	r8, r0
 8003c7a:	4614      	mov	r4, r2
 8003c7c:	460e      	mov	r6, r1
 8003c7e:	b921      	cbnz	r1, 8003c8a <_realloc_r+0x16>
 8003c80:	4611      	mov	r1, r2
 8003c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c86:	f7ff bc37 	b.w	80034f8 <_malloc_r>
 8003c8a:	b92a      	cbnz	r2, 8003c98 <_realloc_r+0x24>
 8003c8c:	f7ff fbcc 	bl	8003428 <_free_r>
 8003c90:	4625      	mov	r5, r4
 8003c92:	4628      	mov	r0, r5
 8003c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c98:	f000 f81b 	bl	8003cd2 <_malloc_usable_size_r>
 8003c9c:	4284      	cmp	r4, r0
 8003c9e:	4607      	mov	r7, r0
 8003ca0:	d802      	bhi.n	8003ca8 <_realloc_r+0x34>
 8003ca2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ca6:	d812      	bhi.n	8003cce <_realloc_r+0x5a>
 8003ca8:	4621      	mov	r1, r4
 8003caa:	4640      	mov	r0, r8
 8003cac:	f7ff fc24 	bl	80034f8 <_malloc_r>
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	d0ed      	beq.n	8003c92 <_realloc_r+0x1e>
 8003cb6:	42bc      	cmp	r4, r7
 8003cb8:	4622      	mov	r2, r4
 8003cba:	4631      	mov	r1, r6
 8003cbc:	bf28      	it	cs
 8003cbe:	463a      	movcs	r2, r7
 8003cc0:	f7ff ffca 	bl	8003c58 <memcpy>
 8003cc4:	4631      	mov	r1, r6
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	f7ff fbae 	bl	8003428 <_free_r>
 8003ccc:	e7e1      	b.n	8003c92 <_realloc_r+0x1e>
 8003cce:	4635      	mov	r5, r6
 8003cd0:	e7df      	b.n	8003c92 <_realloc_r+0x1e>

08003cd2 <_malloc_usable_size_r>:
 8003cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd6:	1f18      	subs	r0, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bfbc      	itt	lt
 8003cdc:	580b      	ldrlt	r3, [r1, r0]
 8003cde:	18c0      	addlt	r0, r0, r3
 8003ce0:	4770      	bx	lr
	...

08003ce4 <_init>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr

08003cf0 <_fini>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr
